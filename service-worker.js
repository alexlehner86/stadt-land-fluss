try{self["workbox:core:5.1.4"]&&_()}catch(t){}const t={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},e=e=>[t.prefix,e,t.suffix].filter(t=>t&&t.length>0).join("-"),s=s=>s||e(t.precache),n=t=>new URL(String(t),location.href).href.replace(new RegExp("^"+location.origin),""),i=(t,...e)=>{let s=t;return e.length>0&&(s+=" :: "+JSON.stringify(e)),s};class a extends Error{constructor(t,e){super(i(t,e)),this.name=t,this.details=e}}const c=new Set;const r=(t,e)=>t.filter(t=>e in t),o=async({request:t,mode:e,plugins:s=[]})=>{const n=r(s,"cacheKeyWillBeUsed");let i=t;for(const t of n)i=await t.cacheKeyWillBeUsed.call(t,{mode:e,request:i}),"string"==typeof i&&(i=new Request(i));return i},l=async({cacheName:t,request:e,event:s,matchOptions:n,plugins:i=[]})=>{const a=await self.caches.open(t),c=await o({plugins:i,request:e,mode:"read"});let r=await a.match(c,n);for(const e of i)if("cachedResponseWillBeUsed"in e){const i=e.cachedResponseWillBeUsed;r=await i.call(e,{cacheName:t,event:s,matchOptions:n,cachedResponse:r,request:c})}return r},u=async({cacheName:t,request:e,response:s,event:i,plugins:u=[],matchOptions:h})=>{const f=await o({plugins:u,request:e,mode:"write"});if(!s)throw new a("cache-put-with-no-response",{url:n(f.url)});const d=await(async({request:t,response:e,event:s,plugins:n=[]})=>{let i=e,a=!1;for(const e of n)if("cacheWillUpdate"in e){a=!0;const n=e.cacheWillUpdate;if(i=await n.call(e,{request:t,response:i,event:s}),!i)break}return a||(i=i&&200===i.status?i:void 0),i||null})({event:i,plugins:u,response:s,request:f});if(!d)return;const w=await self.caches.open(t),p=r(u,"cacheDidUpdate"),y=p.length>0?await l({cacheName:t,matchOptions:h,request:f}):null;try{await w.put(f,d)}catch(t){throw"QuotaExceededError"===t.name&&await async function(){for(const t of c)await t()}(),t}for(const e of p)await e.cacheDidUpdate.call(e,{cacheName:t,event:i,oldResponse:y,newResponse:d,request:f})},h=async({request:t,fetchOptions:e,event:s,plugins:n=[]})=>{if("string"==typeof t&&(t=new Request(t)),s instanceof FetchEvent&&s.preloadResponse){const t=await s.preloadResponse;if(t)return t}const i=r(n,"fetchDidFail"),c=i.length>0?t.clone():null;try{for(const e of n)if("requestWillFetch"in e){const n=e.requestWillFetch,i=t.clone();t=await n.call(e,{request:i,event:s})}}catch(t){throw new a("plugin-error-request-will-fetch",{thrownError:t})}const o=t.clone();try{let i;i="navigate"===t.mode?await fetch(t):await fetch(t,e);for(const t of n)"fetchDidSucceed"in t&&(i=await t.fetchDidSucceed.call(t,{event:s,request:o,response:i}));return i}catch(t){for(const e of i)await e.fetchDidFail.call(e,{error:t,event:s,originalRequest:c.clone(),request:o.clone()});throw t}};let f;async function d(t,e){const s=t.clone(),n={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},i=e?e(n):n,a=function(){if(void 0===f){const t=new Response("");if("body"in t)try{new Response(t.body),f=!0}catch(t){f=!1}f=!1}return f}()?s.body:await s.blob();return new Response(a,i)}try{self["workbox:precaching:5.1.4"]&&_()}catch(t){}function w(t){if(!t)throw new a("add-to-cache-list-unexpected-type",{entry:t});if("string"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:s}=t;if(!s)throw new a("add-to-cache-list-unexpected-type",{entry:t});if(!e){const t=new URL(s,location.href);return{cacheKey:t.href,url:t.href}}const n=new URL(s,location.href),i=new URL(s,location.href);return n.searchParams.set("__WB_REVISION__",e),{cacheKey:n.href,url:i.href}}class p{constructor(t){this.t=s(t),this.s=new Map,this.i=new Map,this.o=new Map}addToCacheList(t){const e=[];for(const s of t){"string"==typeof s?e.push(s):s&&void 0===s.revision&&e.push(s.url);const{cacheKey:t,url:n}=w(s),i="string"!=typeof s&&s.revision?"reload":"default";if(this.s.has(n)&&this.s.get(n)!==t)throw new a("add-to-cache-list-conflicting-entries",{firstEntry:this.s.get(n),secondEntry:t});if("string"!=typeof s&&s.integrity){if(this.o.has(t)&&this.o.get(t)!==s.integrity)throw new a("add-to-cache-list-conflicting-integrities",{url:n});this.o.set(t,s.integrity)}if(this.s.set(n,t),this.i.set(n,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}async install({event:t,plugins:e}={}){const s=[],n=[],i=await self.caches.open(this.t),a=await i.keys(),c=new Set(a.map(t=>t.url));for(const[t,e]of this.s)c.has(e)?n.push(t):s.push({cacheKey:e,url:t});const r=s.map(({cacheKey:s,url:n})=>{const i=this.o.get(s),a=this.i.get(n);return this.l({cacheKey:s,cacheMode:a,event:t,integrity:i,plugins:e,url:n})});await Promise.all(r);return{updatedURLs:s.map(t=>t.url),notUpdatedURLs:n}}async activate(){const t=await self.caches.open(this.t),e=await t.keys(),s=new Set(this.s.values()),n=[];for(const i of e)s.has(i.url)||(await t.delete(i),n.push(i.url));return{deletedURLs:n}}async l({cacheKey:t,url:e,cacheMode:s,event:n,plugins:i,integrity:c}){const r=new Request(e,{integrity:c,cache:s,credentials:"same-origin"});let o,l=await h({event:n,plugins:i,request:r});for(const t of i||[])"cacheWillUpdate"in t&&(o=t);if(!(o?await o.cacheWillUpdate({event:n,request:r,response:l}):l.status<400))throw new a("bad-precaching-response",{url:e,status:l.status});l.redirected&&(l=await d(l)),await u({event:n,plugins:i,response:l,request:t===e?r:new Request(t),cacheName:this.t,matchOptions:{ignoreSearch:!0}})}getURLsToCacheKeys(){return this.s}getCachedURLs(){return[...this.s.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.s.get(e.href)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.t)).match(s)}}createHandler(t=!0){return async({request:e})=>{try{const t=await this.matchPrecache(e);if(t)return t;throw new a("missing-precache-entry",{cacheName:this.t,url:e instanceof Request?e.url:e})}catch(s){if(t)return fetch(e);throw s}}}createHandlerBoundToURL(t,e=!0){if(!this.getCacheKeyForURL(t))throw new a("non-precached-url",{url:t});const s=this.createHandler(e),n=new Request(t);return()=>s({request:n})}}let y;const g=()=>(y||(y=new p),y);const v=(t,e)=>{const s=g().getURLsToCacheKeys();for(const n of function*(t,{ignoreURLParametersMatching:e,directoryIndex:s,cleanURLs:n,urlManipulation:i}={}){const a=new URL(t,location.href);a.hash="",yield a.href;const c=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some(t=>t.test(s))&&t.searchParams.delete(s);return t}(a,e);if(yield c.href,s&&c.pathname.endsWith("/")){const t=new URL(c.href);t.pathname+=s,yield t.href}if(n){const t=new URL(c.href);t.pathname+=".html",yield t.href}if(i){const t=i({url:a});for(const e of t)yield e.href}}(t,e)){const t=s.get(n);if(t)return t}};let R=!1;function m(t){R||((({ignoreURLParametersMatching:t=[/^utm_/],directoryIndex:e="index.html",cleanURLs:n=!0,urlManipulation:i}={})=>{const a=s();self.addEventListener("fetch",s=>{const c=v(s.request.url,{cleanURLs:n,directoryIndex:e,ignoreURLParametersMatching:t,urlManipulation:i});if(!c)return;let r=self.caches.open(a).then(t=>t.match(c)).then(t=>t||fetch(c));s.respondWith(r)})})(t),R=!0)}const j=[],q={get:()=>j,add(t){j.push(...t)}},U=t=>{const e=g(),s=q.get();t.waitUntil(e.install({event:t,plugins:s}).catch(t=>{throw t}))},k=t=>{const e=g();t.waitUntil(e.activate())};var L;self.addEventListener("message",t=>{t.data&&"SKIP_WAITING"===t.data.type&&self.skipWaiting()}),L={},function(t){g().addToCacheList(t),t.length>0&&(self.addEventListener("install",U),self.addEventListener("activate",k))}([{url:"/stadt-land-fluss/index.html",revision:"b3b438b0de37d237a9737ed6b409512c"},{url:"/stadt-land-fluss/static/css/10.99d7a48e.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/11.8c5178a8.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/14.f161706c.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/15.f161706c.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/7.cba20cbc.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/8.4f555c2e.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/9.2e040679.chunk.css",revision:null},{url:"/stadt-land-fluss/static/css/main.22ad3656.chunk.css",revision:null},{url:"/stadt-land-fluss/static/js/0.ed9e5f3a.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/1.430dc2f5.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/10.5da25a7c.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/11.eb711a3e.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/12.a199239c.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/13.7ba047d3.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/14.a42bb52f.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/15.9d92fefe.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/2.b0244a15.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/3.cc6081e2.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/6.4551bc47.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/7.f4b4d6de.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/8.dab950ea.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/9.5fbec283.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/main.810af723.chunk.js",revision:null},{url:"/stadt-land-fluss/static/js/runtime-main.c54fc9c2.js",revision:null}]),m(L);
//# sourceMappingURL=service-worker.js.map
