{"version":3,"sources":["components/ToDashboardButton/ToDashboardButton.tsx","components/ToDashboardButton/ToDashboardButton.module.css","utils/game.utils.ts","components/ScoringOptionsList/ScoringOptionsList.tsx","components/ScoringOptionsList/ScoringOptionsList.module.css","components/GameResultsList/GameResultsList.module.css","containers/GameResults/GameResults.module.css","components/FireworksAnimation/FireworksAnimation.tsx","components/GameResultsList/GameResultsList.tsx","components/GameRoundsTable/GameRoundsTable.tsx","components/GameRoundsOverviewButton/GameRoundsOverviewButton.tsx","components/HallOfFameButton/HallOfFameButton.tsx","containers/GameResults/GameResults.tsx"],"names":["ToDashboardButton","props","className","styles","button_wrapper","type","color","variant","size","startIcon","onClick","onReturnToDashboard","module","exports","getRandomLetters","numberOfLetters","possibleLetters","length","Error","randomnLetters","lettersToSelectFrom","i","randomnLetter","randomnItem","push","filter","letter","getRandomCategories","numberOfCategories","categoryPool","preselectedCategories","randomCategories","numberOfRandomSelections","categoriesToSelectFrom","category","includes","randomCategory","c","getPlayersInAlphabeticalOrder","players","Array","from","map","data","sort","a","b","name","toLowerCase","getEmptyRoundInputs","numberOfInputs","createAndFillArray","points","STANDARD_POINTS","stars","text","valid","markEmptyPlayerInputsAsInvalid","playerInputs","input","trimmedText","trim","createGameRoundEvaluation","categories","gameRoundEvaluation","Map","forEach","evaluatedPlayer","evaluationsForAllCategories","evaluationForOneCategory","evaluatingPlayer","set","id","calculatePointsForRound","scoringOptions","round","equalAnswers","checkForDuplicates","onlyPlayerWithValidAnswer","playerId","keys","next","value","playerInputsOfPlayer1","get","categoryIndex","calculatePointsForCategory","equalAnswersForCategory","isOnlyPlayerWithValidAnswer","ONLY_ANSWER_POINTS","awardSameWordPoints","isDuplicateOfOtherPlayersInput","SAME_WORD_POINTS","otherPlayersIds","isOnlyPlayer","playerInputText","getCleanText","some","otherPlayersInput","getMinNumberOfInvalids","numberOfPlayers","getNumberOfInvalids","evaluations","count","markedAsValid","getRejectingPlayers","rejectingPlayers","playerInfo","applyValidFlagAndCreativeStarsToPoints","creativeAnswersExtraPoints","EXTRA_POINTS","calculateGameResults","allPlayers","gameRounds","gameResultForPlayer","inputs","reduce","total","item","allPoints","gameResultsMap","Object","playerNames","groupedGameResults","uniq","createHallOfFameData","gameConfig","hallOfFameData","playerInput","playerName","ScoringOptionsList","rules","Fragment","isForGameResultsPage","heading","list","GAME_OPTION_LABEL","FireworksAnimation","useState","showFireworks","setShowFireworks","fadeOut","setFadeOut","useEffect","fireworksTimeouts","setTimeout","duration","timeout","clearTimeout","React","memo","GameResultsList","getIconForPlace","place","baseUrl","process","src","first_place_trophy","alt","second_place_trophy","third_place_trophy","fontSize","List","component","gameResults","resultsGroup","index","ListItem","game_results_item","ListItemIcon","icon","ListItemText","first_place_text","other_place_text","primary","joinWithAnd","secondary","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","main","contrastText","maxWidth","borderRight","body","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","tableContainer","borderRadius","table","firstColumn","fontWeight","invalidInput","textDecoration","creativeAnswerStarIcon","paddingRight","verticalAlign","GameRoundsTable","classes","gameRound","roundNo","sortedPlayers","veryCreativeAnswer","Tooltip","title","placement","TableContainer","Paper","Table","aria-label","TableHead","player","playerIndex","align","TableBody","scope","TabPanel","children","other","role","hidden","aria-labelledby","flexGrow","width","padding","background","paper","GameRoundsOverviewDialog","open","rounds","onClose","tabValue","setTabValue","Dialog","DialogContent","AppBar","position","Tabs","onChange","event","newValue","indicatorColor","textColor","scrollButtons","_","Tab","label","letters","a11yProps","DialogActions","Button","GameRoundsOverviewButton","setOpen","paddingBottom","listItem","listItemAvatar","marginRight","HallOfFameDialog","DialogContentText","Divider","ListItemAvatar","Chip","HallOfFameButton","disabled","lang","GameResults","state","this","gameResultsElement","SectionHeader","gameSettingsElement","numberOfRounds","join","history","setState","onResetAppState","Component","connect","dispatch","resetAppState"],"mappings":"2LAyBeA,IAf4D,SAAAC,GACvE,OACI,qBAAKC,UAAWC,IAAOC,eAAvB,SACI,cAAC,IAAD,CACIC,KAAK,SACLC,MAAM,UACNC,QAAQ,YACRC,KAAK,QACLC,UAAW,cAAC,IAAD,IACXC,QAAST,EAAMU,oBANnB,2B,oBCZZC,EAAOC,QAAU,CAAC,eAAiB,4C,6jBCmBtBC,EAAmB,SAACC,EAAyBC,GACtD,GAAID,EAAkBC,EAAgBC,OAClC,MAAM,IAAIC,MAAM,0FAIpB,IAFA,IAAMC,EAA2B,GAC7BC,EAAmB,YAAOJ,GALgE,WAMrFK,GACL,IAAMC,EAAgBC,IAAYH,GAClCD,EAAeK,KAAKF,GACpBF,EAAsBA,EAAoBK,QAAO,SAAAC,GAAM,OAAIA,IAAWJ,MAHjED,EAAI,EAAGA,EAAIN,EAAiBM,IAAM,IAK3C,OAAOF,GAMEQ,EAAsB,SAC/BC,EAA4BC,EAAwBC,GAKpD,IAHA,IAAMC,EAA0B,YAAOD,GACjCE,EAA2BJ,EAAqBE,EAAsBb,OACxEgB,EAAyBJ,EAAaJ,QAAO,SAAAS,GAAQ,OAAKJ,EAAsBK,SAASD,MAHlF,WAIFb,GACL,IAAMe,EAAiBb,IAAYU,GACnCF,EAAiBP,KAAKY,GACtBH,EAAyBA,EAAuBR,QAAO,SAAAY,GAAC,OAAIA,IAAMD,MAH7Df,EAAI,EAAGA,EAAIW,EAA0BX,IAAM,IAKpD,OAAOU,GAGEO,EAAgC,SAACC,GAE1C,OADwBC,MAAMC,KAAKF,GAASG,KAAI,SAAAC,GAAI,OAAIA,EAAK,MACtCC,MAAK,SAACC,EAAGC,GAC5B,OAAID,EAAEE,KAAKC,cAAgBF,EAAEC,KAAKC,eAAyB,EACvDH,EAAEE,KAAKC,cAAgBF,EAAEC,KAAKC,cAAwB,EACnD,MAOFC,EAAsB,SAACC,GAChC,OAAOC,YAAgCD,EAAgB,CAAEE,OAAQC,IAAiBC,MAAO,EAAGC,KAAM,GAAIC,OAAO,KAQpGC,EAAiC,SAACC,GAC3C,OAAOA,EAAahB,KAAI,SAAAiB,GACpB,IAAMC,EAAcD,EAAMJ,KAAKM,OAC/B,OAAO,2BAAKF,GAAZ,IAAmBJ,KAAMK,EAAaJ,MAAuB,KAAhBI,QAIxCE,EAA4B,SAACvB,EAAkCwB,GACxE,IAAMC,EAAsB,IAAIC,IAahC,OAZA1B,EAAQ2B,SAAQ,SAAAC,GACZ,IAAMC,EAAuD,GAC7DL,EAAWG,SAAQ,WACf,IAAMG,EAAkD,IAAIJ,IAC5D1B,EAAQ2B,SAAQ,SAAAI,GAEZD,EAAyBE,IAAID,EAAiBE,IAAI,MAEtDJ,EAA4B5C,KAAK6C,MAErCL,EAAoBO,IAAIJ,EAAgBK,GAAIJ,MAEzCJ,GAOES,EAA0B,SACnCC,EAA0CC,EAAkBC,GAE5D,GAAKF,EAAeG,oBAAuBH,EAAeI,0BAI1D,IAHA,IAAMC,EAAWJ,EAAMK,OAAOC,OAAOC,MAC/BC,EAAwBR,EAAMS,IAAIL,GAE/BM,EAAgB,EAAGA,EAAgBF,EAAsBlE,OAAQoE,IACtEC,EAA2BZ,EAAgBC,EAAOU,EAAeT,EAAaQ,IAAIC,KAQ7EC,EAA6B,SACtCZ,EAA0CC,EAAkBU,GACpD,IAD2EE,EAC5E,uDADgH,IAElHb,EAAeG,oBAAuBH,EAAeI,4BAC1DtC,MAAMC,KAAKkC,EAAMK,QAAQd,SAAQ,SAAAa,GAC7B,IAAMrB,EAAeiB,EAAMS,IAAIL,GAE/B,GAAIrB,EAAa2B,GAAe7B,MAC5B,GAAIkB,EAAeI,2BAA6BU,EAA4BT,EAAUJ,EAAOU,GACzF3B,EAAa2B,GAAejC,OAASqC,QAClC,CACH,IAAMC,EAAsBhB,EAAeG,oBACpCc,EAA+BZ,EAAUJ,EAAOU,EAAeE,GACtE7B,EAAa2B,GAAejC,OAASsC,EAAsBE,IAAmBvC,SAMjFmC,EAA8B,SAACT,EAAkBJ,EAAkBU,GAC5E,IAAMQ,EAAkBrD,MAAMC,KAAKkC,EAAMK,QAAQvD,QAAO,SAAA+C,GAAE,OAAIA,IAAOO,KACjEe,GAAe,EAEnB,OADAD,EAAgB3B,SAAQ,SAAAM,GAAE,OAAIsB,EAAeA,IAAkBnB,EAAMS,IAAIZ,GAAsBa,GAAe7B,SACvGsC,GAOEH,EAAiC,SAC1CZ,EAAkBJ,EAAkBU,EAAuBT,GAE3D,IAAMmB,EAAkBC,YAAcrB,EAAMS,IAAIL,GAA4BM,GAAe9B,MACrFsC,EAAkBrD,MAAMC,KAAKkC,EAAMK,QAAQvD,QAAO,SAAA+C,GAAE,OAAIA,IAAOO,KACrE,OAAOH,EAAazC,SAAS4D,IAAoBE,eAAKJ,GAAiB,SAAArB,GACnE,IAAM0B,EAAqBvB,EAAMS,IAAIZ,GAAsBa,GAC3D,OAAOa,EAAkB1C,OAASuC,IAAoBC,YAAaE,EAAkB3C,UAQhF4C,EAAyB,SAACC,GAAD,OAAqCA,GAAmB,EAAI,EAAI,GAKzFC,EAAsB,SAACC,GAChC,IAAIC,EAAQ,EAEZ,OADAD,EAAYpC,SAAQ,SAAAsC,GAAa,OAAID,EAAQC,EAAgBD,EAAQA,EAAQ,KACtEA,GAQEE,EAAsB,SAACH,EAAoC/D,GACpE,IAAMmE,EAAmB,IAAIzC,IAS7B,OARAqC,EAAYpC,SAAQ,SAACsC,EAAezB,GAChC,IAAKyB,EAAe,CAChB,IAAMG,EAAapE,EAAQ6C,IAAIL,GAC3B4B,GACAD,EAAiBnC,IAAIQ,EAAU4B,OAIpCrE,EAA8BoE,IAO5BE,EAAyC,SAAClC,EAA0CC,GAC7FA,EAAMT,SAAQ,SAAAR,GACVA,EAAaQ,SAAQ,SAAAP,GACZA,EAAMH,MAEAkB,EAAemC,4BAA8BlD,EAAML,MAAQ,IAClEK,EAAMP,QAAU0D,IAAenD,EAAML,OAFrCK,EAAMP,OAAS,SAWlB2D,EAAuB,SAACC,EAAqCC,GAEtE,IAAMC,EAAoE,GAC1EF,EAAW9C,SAAQ,SAACyC,EAAY5B,GAAb,OAA0BmC,EAAoBnC,GAAY,CAAEhC,KAAM4D,EAAW5D,KAAMK,OAAQ,MAC9G6D,EAAW/C,SAAQ,SAAAS,GACfA,EAAMT,SAAQ,SAACiD,EAAQpC,GAAT,OAAsBmC,EAAoBnC,GAAU3B,QAAU+D,EAAOC,QAAO,SAACC,EAAOC,GAAR,OAAiBD,EAAQC,EAAKlE,SAAQ,SAGpI,IAAMmE,EAAsB,GACtBC,EAAiB,IAAIvD,IAC3BwD,OAAOzC,KAAKkC,GAAqBhD,SAAQ,SAAAa,GAAa,IAAD,EACxBmC,EAAoBnC,GAArChC,EADyC,EACzCA,KAAMK,EADmC,EACnCA,OACdmE,EAAU/F,KAAK4B,GACf,IAAMsE,EAAcF,EAAepC,IAAIhC,IAAW,GAClDoE,EAAejD,IAAInB,EAAnB,sBAA+BsE,GAA/B,CAA4C3E,QAGhD,IAAM4E,EAAyC,GAI/C,OAHAC,eAAKL,GACA3E,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KACnBqB,SAAQ,SAAAd,GAAM,OAAIuE,EAAmBnG,KAAK,CAAEkG,YAAcF,EAAepC,IAAIhC,GAAqBR,OAAQQ,cACxGuE,GAMEE,EAAuB,SAACb,EAAqCc,EAAwBb,GAC9F,IAAMc,EAAoC,GAe1C,OAdAd,EAAW/C,SAAQ,SAAAS,GACfA,EAAMT,SAAQ,SAACR,EAAcqB,GACzB,IAAM4B,EAAaK,EAAW5B,IAAIL,GAClCrB,EAAaQ,SAAQ,SAAC8D,EAAa3C,GAC3B2C,EAAYxE,OAASwE,EAAY1E,MAAQ,GACzCyE,EAAevG,KAAK,CAChBU,SAAU4F,EAAW/D,WAAWsB,GAChC4C,WAAYtB,EAAW5D,KACvBQ,KAAMyE,EAAYzE,gBAM/BwE,I,sFC9NIG,IAnB8D,SAAAjI,GAAU,IAC3EkI,EAAUlI,EAAVkI,MAYR,OAAIA,EAAMtD,oBAAsBsD,EAAMrD,2BAA6BqD,EAAMtB,2BAVrE,eAAC,IAAMuB,SAAP,WACKnI,EAAMoI,qBAAuB,oBAAInI,UAAWC,IAAOmI,QAAtB,6CAAmE,KAC/FrI,EAAMoI,qBAA0F,KAAnE,oBAAInI,UAAWC,IAAOmI,QAAtB,6CAC/B,qBAAIpI,UAAWC,IAAOoI,KAAtB,UACKJ,EAAMtD,mBAAqB,6BAAK2D,IAAkB3D,qBAA2B,KAC7EsD,EAAMrD,0BAA4B,6BAAK0D,IAAkB1D,4BAAkC,KAC3FqD,EAAMtB,2BAA6B,6BAAK2B,IAAkB3B,6BAAmC,WAOnG,O,oBC1BXjG,EAAOC,QAAU,CAAC,QAAU,oCAAoC,KAAO,mC,0CCAvED,EAAOC,QAAU,CAAC,kBAAoB,2CAA2C,KAAO,8BAA8B,mBAAqB,4CAA4C,oBAAsB,6CAA6C,mBAAqB,4CAA4C,iBAAmB,0CAA0C,iBAAmB,4C,oBCA3YD,EAAOC,QAAU,CAAC,eAAiB,sC,6HCO7B4H,G,OAAuE,SAAAxI,GAAU,IAAD,EACxCyI,oBAAS,GAD+B,mBAC3EC,EAD2E,KAC5DC,EAD4D,OAEpDF,oBAAS,GAF2C,mBAE3EG,EAF2E,KAElEC,EAFkE,KAclF,OAXAC,qBACI,WACI,IAAMC,EAAoB,CACtBC,YAAW,kBAAMH,GAAW,KAAO7I,EAAMiJ,SAAW,IAAOjJ,EAAMiJ,SAAW,IAAO,GACnFD,YAAW,kBAAML,GAAiB,KAAQ3I,EAAMiJ,WAGpD,OAAO,kBAAMF,EAAkB9E,SAAQ,SAAAiF,GAAO,OAAIC,aAAaD,SAEnE,IAEGR,EACH,sBAAKzI,UAAW,2BAA6B2I,EAAU,YAAc,IAArE,UACI,qBAAK3I,UAAU,yBACf,qBAAKA,UAAU,2BAEnB,OAGOmJ,MAAMC,KAAKb,G,gFCcXc,EAhCwD,SAAAtJ,GACnE,IAAMuJ,EAAkB,SAACC,GACrB,IAAMC,EAAUC,2BAChB,OAAQF,GACJ,KAAK,EACD,OAAO,qBAAKG,IAAG,UAAKF,EAAL,2BAAuCxJ,UAAWC,IAAO0J,mBAAoBC,IAAI,aACpG,KAAK,EACD,OAAO,qBAAKF,IAAG,UAAKF,EAAL,4BAAwCxJ,UAAWC,IAAO4J,oBAAqBD,IAAI,aACtG,KAAK,EACD,OAAO,qBAAKF,IAAG,UAAKF,EAAL,2BAAuCxJ,UAAWC,IAAO6J,mBAAoBF,IAAI,aACpG,QACI,OAAO,cAAC,IAAD,CAAUG,SAAS,YAGtC,OACI,cAACC,EAAA,EAAD,CAAMC,UAAU,KAAhB,SACKlK,EAAMmK,YAAY1H,KAAI,SAAC2H,EAAcC,GAAf,OACnB,eAACC,EAAA,EAAD,CAA8CrK,UAAWC,IAAOqK,kBAAhE,UACI,cAACC,EAAA,EAAD,CAAcvK,UAAWC,IAAOuK,KAAhC,SACKlB,EAAgBc,EAAQ,KAE7B,cAACK,EAAA,EAAD,CACIzK,UAAqB,IAAVoK,EAAcnK,IAAOyK,iBAAmBzK,IAAO0K,iBAC1DC,QAASC,YAAYV,EAAa3C,YAAa,OAC/CsD,UAAS,UAAKX,EAAajH,OAAlB,eAPF,sBAAwBkH,S,qNCdjDW,EAAkBC,aAAW,SAACC,GAAD,OAC/BC,YAAa,CACTC,KAAM,CACFC,gBAAiBH,EAAMI,QAAQT,QAAQU,KACvClL,MAAO6K,EAAMI,QAAQT,QAAQW,aAC7BC,SAAU,OACV,qBAAsB,CAClBC,YAAa,uCAGrBC,KAAM,CACF3B,SAAU,GACVyB,SAAU,OACV,qBAAsB,CAClBC,YAAa,yCAdLT,CAkBtBW,KAEIC,EAAiBZ,aAAW,SAACC,GAAD,OAC9BC,YAAa,CACTW,KAAM,CACF,qBAAsB,CAClBT,gBAAiBH,EAAMI,QAAQS,OAAOC,YAJ/Bf,CAQrBgB,KAEIC,EAAYC,YAAW,CACzBC,eAAgB,CACZC,aAAc,GAElBC,MAAO,CACHb,SAAU,QAEdc,YAAa,CACTC,WAAY,QAEhBC,aAAc,CACVpM,MAAO,UACPqM,eAAgB,gBAEpBC,uBAAwB,CACpBC,aAAc,SACd5C,SAAU,OACV6C,cAAe,cAqERC,EA3DwD,SAAA9M,GACnE,IAAM+M,EAAUb,IACRrE,EAAkD7H,EAAlD6H,WAAYmF,EAAsChN,EAAtCgN,UAAWC,EAA2BjN,EAA3BiN,QAASC,EAAkBlN,EAAlBkN,cAElCC,EAAqB,SAACpF,GAAD,OACvB,eAAC,IAAMI,SAAP,WACI,cAACiF,EAAA,EAAD,CACIC,MAAM,iCACNC,UAAU,SAFd,SAII,cAAC,IAAD,CAAUrN,UAAW8M,EAAQJ,uBAAwBtM,MAAM,gBAE/D,iCAAO0H,EAAYzE,KAAnB,MAA4ByE,EAAY5E,OAAxC,WAyBR,OACI,cAACoK,EAAA,EAAD,CAAgBrD,UAAWsD,IAAOvN,UAAW8M,EAAQX,eAArD,SACI,eAACqB,EAAA,EAAD,CAAOxN,UAAW8M,EAAQT,MAAOoB,aAAA,gBAAqBT,EAArB,cAAjC,UACI,cAACU,EAAA,EAAD,UACI,eAAC1B,EAAA,EAAD,WACI,cAACjB,EAAD,wBACCkC,EAAczK,KAAI,SAACmL,EAAQC,GAAT,OACf,cAAC7C,EAAD,CAEI8C,MAAM,QAFV,SAGEF,EAAO9K,MAHT,yCAC2C+K,YAMvD,cAACE,EAAA,EAAD,UACKlG,EAAW/D,WAAWrB,KArCL,SAACR,EAAkBmD,GACjD,OACI,eAACyG,EAAD,WACI,cAACb,EAAD,CAAiBd,UAAU,KAAK8D,MAAM,MAAM/N,UAAW8M,EAAQR,YAA/D,SAA6EtK,IAC5EiL,EAAczK,KAAI,SAACmL,EAAQC,GACxB,IAAM9F,EAAeiF,EAAU7H,IAAIyI,EAAOrJ,IAAsBa,GAChE,OACI,eAAC4F,EAAD,CAEI/K,UAAY8H,EAAYxE,MAA+B,GAAvBwJ,EAAQN,aACxCqB,MAAM,QAHV,UAKK/F,EAAYxE,OAASwE,EAAY1E,MAAQ,EAAI8J,EAAmBpF,GAAe,KAC/EA,EAAYxE,OAA+B,IAAtBwE,EAAY1E,MAAjC,UAAkD0E,EAAYzE,KAA9D,cAAwEyE,EAAY5E,OAApF,KAAgG,MAC/F4E,EAAYxE,OAAWwE,EAAYzE,KAAOyE,EAAYzE,KAAO,KAC7DyE,EAAYxE,OAAUwE,EAAYzE,KAAwD,KAAjD,sBAAMrD,UAAU,UAAhB,6BAR/C,sCACwCmF,EADxC,mBACgEyI,SAN5E,qCAAmDzI,eC1EzD6I,EAAmD,SAAAjO,GAAU,IACvDkO,EAAqClO,EAArCkO,SAAUjJ,EAA2BjF,EAA3BiF,MAAOoF,EAAoBrK,EAApBqK,MAAU8D,EAD2B,YACjBnO,EADiB,8BAE9D,OACI,6CACIoO,KAAK,WACLC,OAAQpJ,IAAUoF,EAClB9F,GAAE,mCAA8B8F,GAChCiE,kBAAA,8BAAwCjE,IACpC8D,GALR,aAOKlJ,IAAUoF,GAAS6D,MAU1BhC,GAAYC,aAAW,SAACjB,GAAD,MAAmB,CAC5CY,KAAM,CACFyC,SAAU,EACVC,MAAO,OACPC,QAAS,eACTpD,gBAAiBH,EAAMI,QAAQoD,WAAWC,WAW5CC,GAAmF,SAAA5O,GACrF,IAAM+M,EAAUb,KACRrE,EAAqD7H,EAArD6H,WAAYgH,EAAyC7O,EAAzC6O,KAAMC,EAAmC9O,EAAnC8O,OAAQ5B,EAA2BlN,EAA3BkN,cAAe6B,EAAY/O,EAAZ+O,QAF6C,EAG9D3F,IAAMX,SAAS,GAH+C,mBAGvFuG,EAHuF,KAG7EC,EAH6E,KAM9F,OACI,eAACC,EAAA,EAAD,CAAQH,QAASA,EAASF,KAAMA,EAAMpD,SAAS,KAA/C,UACI,eAAC0D,EAAA,EAAD,CAAelP,UAAW8M,EAAQjB,KAAlC,UACI,cAACsD,EAAA,EAAD,CAAQC,SAAS,SAAShP,MAAM,UAAhC,SACI,cAACiP,EAAA,EAAD,CACIrK,MAAO+J,EACPO,SARC,SAACC,EAA+BC,GAAhC,OAAqDR,EAAYQ,IASlEC,eAAe,YACfC,UAAU,UACVrP,QAAQ,aACRsP,cAAc,OANlB,SAQKd,EAAOrM,KAAI,SAACoN,EAAGxF,GAAJ,OACR,cAACyF,EAAA,EAAD,aAEIC,MAAK,gBAAW1F,EAAQ,EAAnB,aAAyBxC,EAAWmI,QAAQ3F,KA1C/D,SAACA,GAAD,MAAoB,CAClC9F,GAAG,uBAAD,OAAyB8F,GAC3B,gBAAgB,4BAAhB,OAA6CA,IAyCb4F,CAAU5F,IAHlB,uCACyCA,WAOpDyE,EAAOrM,KAAI,SAACiC,EAAO2F,GAAR,OACR,cAAC,EAAD,CAEIpF,MAAO+J,EACP3E,MAAOA,EAHX,SAKI,cAAC,EAAD,CACIxC,WAAYA,EACZmF,UAAWtI,EACXuI,QAAS5C,EAAQ,EACjB6C,cAAeA,KATvB,6CAC+C7C,UAavD,cAAC6F,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQ/P,KAAK,SAASK,QAASsO,EAA/B,gCAwCDqB,GAxB0E,SAAApQ,GAAU,IAAD,EACtEyI,oBAAS,GAD6D,mBACvFoG,EADuF,KACjFwB,EADiF,KAI9F,OACI,eAAC,IAAMlI,SAAP,WACI,cAACgI,EAAA,EAAD,CACI9P,MAAM,UACNC,QAAQ,YACRC,KAAK,QACLC,UAAW,cAAC,IAAD,IACXC,QAAS,kBAAM4P,GAAQ,IAL3B,mCAOA,cAAC,GAAD,CACIxI,WAAY7H,EAAM6H,WAClBgH,KAAMA,EACNC,OAAQ9O,EAAM8O,OACd5B,cAAelN,EAAMkN,cACrB6B,QAhBQ,kBAAMsB,GAAQ,U,8BC5FhCnE,GAAYC,YAAW,CACzB7D,KAAM,CACFgI,cAAe,GAEnBC,SAAU,CACN9B,QAAS,aAEb+B,eAAgB,CACZC,YAAa,QAEjB5F,QAAS,CACLxK,MAAO,UACP2J,SAAU,YAEde,UAAW,CACP1K,MAAO,QACP2J,SAAU,UASZ0G,GAAmE,SAAA1Q,GACrE,IAAME,EAASgM,KACPpE,EAAkC9H,EAAlC8H,eAAgB+G,EAAkB7O,EAAlB6O,KAAME,EAAY/O,EAAZ+O,QAC9B,OACI,eAACG,EAAA,EAAD,CAAQH,QAASA,EAASF,KAAMA,EAAMpD,SAAS,KAA/C,UACI,eAAC0D,EAAA,EAAD,WACI,cAACwB,GAAA,EAAD,2BACA,cAACC,EAAA,EAAD,IACA,cAAC3G,EAAA,EAAD,CAAMhK,UAAWC,EAAOoI,KAAxB,SACKR,EAAerF,KAAI,SAAC4E,EAAMgD,GAAP,OAChB,eAACC,EAAA,EAAD,CAAiDrK,UAAWC,EAAOqQ,SAAnE,UACI,cAACM,GAAA,EAAD,CAAgB5Q,UAAWC,EAAOsQ,eAAlC,SACI,cAACM,GAAA,EAAD,CACIrG,KAAM,cAAC,IAAD,IACNpK,MAAM,UACN0P,MAAO1I,EAAKW,eAGpB,cAAC0C,EAAA,EAAD,CACIG,QAASxD,EAAKpF,SACd8I,UAAW1D,EAAK/D,KAChByJ,QAAS,CAAElC,QAAS3K,EAAO2K,QAASE,UAAW7K,EAAO6K,eAX9D,gCAAwCV,YAiBpD,cAAC6F,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQ/P,KAAK,SAASK,QAASsO,EAA/B,gCAuCDgC,GA1B0D,SAAA/Q,GAAU,IAAD,EACtDyI,oBAAS,GAD6C,mBACvEoG,EADuE,KACjEwB,EADiE,KAI9E,OACI,eAAC,IAAMlI,SAAP,WACI,eAACgI,EAAA,EAAD,CACI9P,MAAM,UACNC,QAAQ,YACRC,KAAK,QACLC,UAAW,cAAC,IAAD,IACXwQ,SAA0C,IAAhChR,EAAM8H,eAAe9G,OAC/BP,QAAS,kBAAM4P,GAAQ,IAN3B,UAQI,sBAAMY,KAAK,KAAX,0BACA,sBAAMhR,UAAU,UAAhB,0DAEJ,cAAC,GAAD,CACI6H,eAAgB9H,EAAM8H,eACtB+G,KAAMA,EACNE,QAlBQ,kBAAMsB,GAAQ,U,qECzDhCa,G,4MACKC,MAA0B,CAC7BtJ,WAAY,KACZsC,YAAa,GACbnD,WAAY,GACZc,eAAgB,GAChBoF,cAAe,I,uDAGF,IAAD,OACZ,GAA8B,OAA1BkE,KAAKD,MAAMtJ,WAAuB,OAAO,KADjC,MAEmEuJ,KAAKD,MAA5EtJ,EAFI,EAEJA,WAAYsC,EAFR,EAEQA,YAAanD,EAFrB,EAEqBA,WAAYc,EAFjC,EAEiCA,eAAgBoF,EAFjD,EAEiDA,cACvDmE,EACF,sBAAKpR,UAAU,sBAAf,UACI,cAACqR,GAAA,EAAD,CAAehO,KAAK,aACpB,mBAAGrD,UAAU,UAAUmO,KAAK,QAA5B,qEAGA,cAAC,EAAD,CAAiBjE,YAAaA,IAC9B,cAACyG,EAAA,EAAD,IACA,sBAAK3Q,UAAWC,KAAOC,eAAvB,UACI,cAAC,GAAD,CACI0H,WAAYA,EACZiH,OAAQ9H,EACRkG,cAAeA,IAEnB,cAAC,GAAD,CAAkBpF,eAAgBA,UAIxCyJ,EACF,sBAAKtR,UAAU,sBAAf,UACI,cAACqR,GAAA,EAAD,CAAehO,KAAK,uBACpB,sBAAKrD,UAAU,gBAAf,UACI,wCACA,4BAAI4H,EAAW2J,iBACf,4CACA,4BAAI3J,EAAWmI,QAAQyB,KAAK,QAC5B,4CACA,4BAAI5J,EAAW/D,WAAW2N,KAAK,WAEnC,cAACxJ,GAAA,EAAD,CAAoBG,sBAAsB,EAAMF,MAAOL,EAAWpD,oBAG1E,OACI,eAAC,IAAM0D,SAAP,WACI,sBAAKlI,UAAU,uBAAf,UACKoR,EACAE,EACD,cAACxR,GAAA,EAAD,CAAmBW,oBAAqB,kBAAM,EAAKV,MAAM0R,QAAQnQ,KAAK,WAE1E,cAAC,EAAD,CAAoB0H,SAAU,W,0CAKd,IAAD,EACwBmI,KAAKpR,MAA5C+G,EADe,EACfA,WAAYc,EADG,EACHA,WAAYb,EADT,EACSA,WAEb,OAAfD,GAAsC,OAAfc,GAAsC,OAAfb,EAC9CoK,KAAKpR,MAAM0R,QAAQnQ,KAAK,MAExB6P,KAAKO,SAAS,CACV9J,aACAsC,YAAarD,aAAqBC,EAAYC,GAC9CA,aACAc,eAAgBF,aAAqBb,EAAYc,EAAYb,GAC7DkG,cAAe7K,aAA8B0E,KAEjDqK,KAAKpR,MAAM4R,uB,GArEGC,aAgFXC,uBANS,SAACX,GAAD,OAA+BA,KAC5B,SAACY,GACxB,MAAO,CACHH,gBAAiB,kBAAMG,EAASC,oBAGzBF,CAA6CZ","file":"static/js/11.eb711a3e.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React from 'react';\r\n\r\nimport styles from './ToDashboardButton.module.css';\r\n\r\ninterface ToDashboardButtonProps {\r\n    onReturnToDashboard: () => any;\r\n}\r\n\r\nconst ToDashboardButton: React.FunctionComponent<ToDashboardButtonProps> = props => {\r\n    return (\r\n        <div className={styles.button_wrapper}>\r\n            <Button\r\n                type=\"button\"\r\n                color=\"default\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<ExitToAppIcon />}\r\n                onClick={props.onReturnToDashboard}\r\n            >Dashboard</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDashboardButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"ToDashboardButton_button_wrapper__1EtAB\"};","import { some, uniq } from 'lodash';\r\nimport randomnItem from 'random-item';\r\n\r\nimport { ONLY_ANSWER_POINTS, SAME_WORD_POINTS, STANDARD_POINTS } from '../constants/game.constant';\r\nimport { Collection } from '../models/collection.interface';\r\nimport { GameConfigScoringOptions, HallOfFameEntry, PlayerInput } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { EXTRA_POINTS } from './../constants/game.constant';\r\nimport {\r\n    GameConfig,\r\n    GameResultsGroup,\r\n    GameRound,\r\n    GameRoundEvaluation,\r\n    PlayerInputEvaluation,\r\n} from './../models/game.interface';\r\nimport { createAndFillArray, getCleanText } from './general.utils';\r\n\r\n/**\r\n* Returns an array of randomly selected, unique letters.\r\n*/\r\nexport const getRandomLetters = (numberOfLetters: number, possibleLetters: string[]): string[] => {\r\n    if (numberOfLetters > possibleLetters.length) {\r\n        throw new Error('Cannot create more randomn unique letters than the number of possibleLetters provided!');\r\n    }\r\n    const randomnLetters: string[] = [];\r\n    let lettersToSelectFrom = [...possibleLetters];\r\n    for (let i = 0; i < numberOfLetters; i++) {\r\n        const randomnLetter = randomnItem(lettersToSelectFrom);\r\n        randomnLetters.push(randomnLetter);\r\n        lettersToSelectFrom = lettersToSelectFrom.filter(letter => letter !== randomnLetter);\r\n    }\r\n    return randomnLetters;\r\n};\r\n\r\n/**\r\n* Returns an array of randomly selected categories.\r\n*/\r\nexport const getRandomCategories = (\r\n    numberOfCategories: number, categoryPool: string[], preselectedCategories: string[]\r\n): string[] => {\r\n    const randomCategories: string[] = [...preselectedCategories];\r\n    const numberOfRandomSelections = numberOfCategories - preselectedCategories.length;\r\n    let categoriesToSelectFrom = categoryPool.filter(category => !preselectedCategories.includes(category));\r\n    for (let i = 0; i < numberOfRandomSelections; i++) {\r\n        const randomCategory = randomnItem(categoriesToSelectFrom);\r\n        randomCategories.push(randomCategory);\r\n        categoriesToSelectFrom = categoriesToSelectFrom.filter(c => c !== randomCategory);\r\n    }\r\n    return randomCategories;\r\n};\r\n\r\nexport const getPlayersInAlphabeticalOrder = (players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const playerInfoArray = Array.from(players).map(data => data[1]);\r\n    return playerInfoArray.sort((a, b) => {\r\n        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\r\n        return 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an array of PlayerInput objects with empty strings and default settings (standard points, stars=0, valid=true).\r\n */\r\nexport const getEmptyRoundInputs = (numberOfInputs: number): PlayerInput[] => {\r\n    return createAndFillArray<PlayerInput>(numberOfInputs, { points: STANDARD_POINTS, stars: 0, text: '', valid: true });\r\n};\r\n\r\n/**\r\n* Checks each PlayerInput object whether it contains text.\r\n* If text string is empty, valid is set to false, otherwise to true.\r\n* The text is also trimmed in order to support correct scoring (finding duplicates).\r\n*/\r\nexport const markEmptyPlayerInputsAsInvalid = (playerInputs: PlayerInput[]): PlayerInput[] => {\r\n    return playerInputs.map(input => {\r\n        const trimmedText = input.text.trim();\r\n        return { ...input, text: trimmedText, valid: trimmedText !== '' };\r\n    });\r\n};\r\n\r\nexport const createGameRoundEvaluation = (players: Map<string, PlayerInfo>, categories: string[]): GameRoundEvaluation => {\r\n    const gameRoundEvaluation = new Map<string, PlayerInputEvaluation[]>();\r\n    players.forEach(evaluatedPlayer => {\r\n        const evaluationsForAllCategories: PlayerInputEvaluation[] = [];\r\n        categories.forEach(() => {\r\n            const evaluationForOneCategory: PlayerInputEvaluation = new Map<string, boolean>();\r\n            players.forEach(evaluatingPlayer => {\r\n                // The default evaluation for each input is valid (= true).\r\n                evaluationForOneCategory.set(evaluatingPlayer.id, true);\r\n            });\r\n            evaluationsForAllCategories.push(evaluationForOneCategory);\r\n        });\r\n        gameRoundEvaluation.set(evaluatedPlayer.id, evaluationsForAllCategories);\r\n    });\r\n    return gameRoundEvaluation;\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs according to the active scoring options.\r\n * `equalAnswers`: The answers manually marked equal by the admin for each category (key = index).\r\n */\r\nexport const calculatePointsForRound = (\r\n    scoringOptions: GameConfigScoringOptions, round: GameRound, equalAnswers: Map<number, string[]>\r\n): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    const playerId = round.keys().next().value;\r\n    const playerInputsOfPlayer1 = round.get(playerId) as PlayerInput[];\r\n    // Loop through all categories.\r\n    for (let categoryIndex = 0; categoryIndex < playerInputsOfPlayer1.length; categoryIndex++) {\r\n        calculatePointsForCategory(scoringOptions, round, categoryIndex, equalAnswers.get(categoryIndex));\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the points for the round's inputs for one category according to the active scoring options.\r\n * `equalAnswersForCategory`: The answers manually marked equal by the admin.\r\n */\r\nexport const calculatePointsForCategory = (\r\n    scoringOptions: GameConfigScoringOptions, round: GameRound, categoryIndex: number, equalAnswersForCategory: string[] = []\r\n): void => {\r\n    if (!scoringOptions.checkForDuplicates && !scoringOptions.onlyPlayerWithValidAnswer) { return; }\r\n    Array.from(round.keys()).forEach(playerId => {\r\n        const playerInputs = round.get(playerId) as PlayerInput[];\r\n        // Only check valid inputs.\r\n        if (playerInputs[categoryIndex].valid) {\r\n            if (scoringOptions.onlyPlayerWithValidAnswer && isOnlyPlayerWithValidAnswer(playerId, round, categoryIndex)) {\r\n                playerInputs[categoryIndex].points = ONLY_ANSWER_POINTS;\r\n            } else {\r\n                const awardSameWordPoints = scoringOptions.checkForDuplicates\r\n                    && isDuplicateOfOtherPlayersInput(playerId, round, categoryIndex, equalAnswersForCategory);\r\n                playerInputs[categoryIndex].points = awardSameWordPoints ? SAME_WORD_POINTS : STANDARD_POINTS;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const isOnlyPlayerWithValidAnswer = (playerId: string, round: GameRound, categoryIndex: number): boolean => {\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    let isOnlyPlayer = true;\r\n    otherPlayersIds.forEach(id => isOnlyPlayer = isOnlyPlayer && !(round.get(id) as PlayerInput[])[categoryIndex].valid);\r\n    return isOnlyPlayer;\r\n};\r\n\r\n/**\r\n * Returns true if a duplicate for playerId's input was found.\r\n * `equalAnswers`: The answers manually marked equal by the admin.\r\n */\r\nexport const isDuplicateOfOtherPlayersInput = (\r\n    playerId: string, round: GameRound, categoryIndex: number, equalAnswers: string[]\r\n): boolean => {\r\n    const playerInputText = getCleanText((round.get(playerId) as PlayerInput[])[categoryIndex].text);\r\n    const otherPlayersIds = Array.from(round.keys()).filter(id => id !== playerId);\r\n    return equalAnswers.includes(playerInputText) || some(otherPlayersIds, id => {\r\n        const otherPlayersInput = (round.get(id) as PlayerInput[])[categoryIndex];\r\n        return otherPlayersInput.valid && playerInputText === getCleanText(otherPlayersInput.text);\r\n    });\r\n};\r\n\r\n/**\r\n * Determines the minimum number of players that need to mark a player's input as invalid\r\n * for the input text to be set to invalid and not count as a point for the player.\r\n */\r\nexport const getMinNumberOfInvalids = (numberOfPlayers: number): number => numberOfPlayers <= 3 ? 1 : 2;\r\n\r\n/**\r\n * Returns how many players marked the input as invalid.\r\n */\r\nexport const getNumberOfInvalids = (evaluations: PlayerInputEvaluation): number => {\r\n    let count = 0;\r\n    evaluations.forEach(markedAsValid => count = markedAsValid ? count : count + 1);\r\n    return count;\r\n};\r\n\r\n/**\r\n * Returns the players that marked the input as invalid in alphabetical order. Parameters:\r\n * - evaluations: Evaluations of all players for one player's input for one category.\r\n * - players: All players taking part in the running game of \"Stadt-Land-Fluss\".\r\n */\r\nexport const getRejectingPlayers = (evaluations: PlayerInputEvaluation, players: Map<string, PlayerInfo>): PlayerInfo[] => {\r\n    const rejectingPlayers = new Map<string, PlayerInfo>();\r\n    evaluations.forEach((markedAsValid, playerId) => {\r\n        if (!markedAsValid) {\r\n            const playerInfo = players.get(playerId);\r\n            if (playerInfo) {\r\n                rejectingPlayers.set(playerId, playerInfo);\r\n            }\r\n        }\r\n    });\r\n    return getPlayersInAlphabeticalOrder(rejectingPlayers);\r\n};\r\n\r\n/**\r\n * Adds extra points for \"creative answer\" stars if scoring option is active\r\n * and sets invalid answer's points to zero.\r\n */\r\nexport const applyValidFlagAndCreativeStarsToPoints = (scoringOptions: GameConfigScoringOptions, round: GameRound): void => {\r\n    round.forEach(playerInputs => {\r\n        playerInputs.forEach(input => {\r\n            if (!input.valid) {\r\n                input.points = 0;\r\n            } else if (scoringOptions.creativeAnswersExtraPoints && input.stars > 0) {\r\n                input.points += EXTRA_POINTS * input.stars;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates game results, groups them by points and sorts them in descending order.\r\n */\r\nexport const calculateGameResults = (allPlayers: Map<string, PlayerInfo>, gameRounds: GameRound[]): GameResultsGroup[] => {\r\n    // 1. Calculate the points for each player.\r\n    const gameResultForPlayer: Collection<{ name: string, points: number }> = {};\r\n    allPlayers.forEach((playerInfo, playerId) => gameResultForPlayer[playerId] = { name: playerInfo.name, points: 0 });\r\n    gameRounds.forEach(round => {\r\n        round.forEach((inputs, playerId) => gameResultForPlayer[playerId].points += inputs.reduce((total, item) => total + item.points, 0));\r\n    });\r\n    // 2. Group the results by points.\r\n    const allPoints: number[] = [];\r\n    const gameResultsMap = new Map<number, string[]>();\r\n    Object.keys(gameResultForPlayer).forEach(playerId => {\r\n        const { name, points } = gameResultForPlayer[playerId];\r\n        allPoints.push(points);\r\n        const playerNames = gameResultsMap.get(points) || [];\r\n        gameResultsMap.set(points, [...playerNames, name]);\r\n    });\r\n    // 3. Return the results groups sorted in descending order.\r\n    const groupedGameResults: GameResultsGroup[] = [];\r\n    uniq(allPoints)\r\n        .sort((a, b) => b - a)\r\n        .forEach(points => groupedGameResults.push({ playerNames: (gameResultsMap.get(points) as string[]).sort(), points }));\r\n    return groupedGameResults;\r\n};\r\n\r\n/**\r\n * Creates a list of entries for the \"Hall of Fame\", the list of answers that received \"creative answer\" stars.\r\n */\r\nexport const createHallOfFameData = (allPlayers: Map<string, PlayerInfo>, gameConfig: GameConfig, gameRounds: GameRound[]): HallOfFameEntry[] => {\r\n    const hallOfFameData: HallOfFameEntry[] = [];\r\n    gameRounds.forEach(round => {\r\n        round.forEach((playerInputs, playerId) => {\r\n            const playerInfo = allPlayers.get(playerId) as PlayerInfo;\r\n            playerInputs.forEach((playerInput, categoryIndex) => {\r\n                if (playerInput.valid && playerInput.stars > 0) {\r\n                    hallOfFameData.push({\r\n                        category: gameConfig.categories[categoryIndex],\r\n                        playerName: playerInfo.name,\r\n                        text: playerInput.text\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return hallOfFameData;\r\n};\r\n","import React from 'react';\r\n\r\nimport { GAME_OPTION_LABEL } from '../../constants/game.constant';\r\nimport { GameConfigScoringOptions } from '../../models/game.interface';\r\nimport styles from './ScoringOptionsList.module.css';\r\n\r\ninterface ScoringOptionsListProps {\r\n    isForGameResultsPage: boolean;\r\n    rules: GameConfigScoringOptions;\r\n}\r\n\r\nconst ScoringOptionsList: React.FunctionComponent<ScoringOptionsListProps> = props => {\r\n    const { rules } = props;\r\n    const createFurtherOptionsElement = (): JSX.Element => (\r\n        <React.Fragment>\r\n            {props.isForGameResultsPage ? <h3 className={styles.heading}>Regeln für die Punktevergabe</h3> : null}\r\n            {!props.isForGameResultsPage ? <h4 className={styles.heading}>Regeln für die Punktevergabe</h4> : null}\r\n            <ul className={styles.list}>\r\n                {rules.checkForDuplicates ? <li>{GAME_OPTION_LABEL.checkForDuplicates}</li> : null}\r\n                {rules.onlyPlayerWithValidAnswer ? <li>{GAME_OPTION_LABEL.onlyPlayerWithValidAnswer}</li> : null}\r\n                {rules.creativeAnswersExtraPoints ? <li>{GAME_OPTION_LABEL.creativeAnswersExtraPoints}</li> : null}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n    if (rules.checkForDuplicates || rules.onlyPlayerWithValidAnswer || rules.creativeAnswersExtraPoints) {\r\n        return createFurtherOptionsElement();\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default ScoringOptionsList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ScoringOptionsList_heading__24MfE\",\"list\":\"ScoringOptionsList_list__2_T80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game_results_item\":\"GameResultsList_game_results_item__1ajwl\",\"icon\":\"GameResultsList_icon__6EkiK\",\"first_place_trophy\":\"GameResultsList_first_place_trophy__2n6pP\",\"second_place_trophy\":\"GameResultsList_second_place_trophy__-hoQi\",\"third_place_trophy\":\"GameResultsList_third_place_trophy__wUNsy\",\"first_place_text\":\"GameResultsList_first_place_text__QYpPI\",\"other_place_text\":\"GameResultsList_other_place_text__2x_QO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"GameResults_button_wrapper__3kHLB\"};","import './FireworksAnimation.css';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ninterface FireworksAnimationProps {\r\n    /** Duration in milliseconds */\r\n    duration: number;\r\n}\r\nconst FireworksAnimation: React.FunctionComponent<FireworksAnimationProps> = props => {\r\n    const [showFireworks, setShowFireworks] = useState(true);\r\n    const [fadeOut, setFadeOut] = useState(false);\r\n    useEffect(\r\n        () => {\r\n            const fireworksTimeouts = [\r\n                setTimeout(() => setFadeOut(true), props.duration > 1000 ? props.duration - 1000 : 0),\r\n                setTimeout(() => setShowFireworks(false), props.duration)\r\n            ];\r\n            // This will clear the timeouts when component unmounts like in willComponentUnmount\r\n            return () => fireworksTimeouts.forEach(timeout => clearTimeout(timeout));\r\n        },\r\n        [] // Leave array empty so that useEffect will run only one time.\r\n    );\r\n    return showFireworks ? (\r\n        <div className={'slf-fireworks-container' + (fadeOut ? ' fade-out' : '')}>\r\n            <div className=\"slf-fireworks-before\"></div>\r\n            <div className=\"slf-fireworks-after\"></div>\r\n        </div>\r\n    ) : null;\r\n};\r\n\r\nexport default React.memo(FireworksAnimation);\r\n","import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport React from 'react';\r\n\r\nimport { GameResultsGroup } from '../../models/game.interface';\r\nimport { joinWithAnd } from '../../utils/general.utils';\r\nimport styles from './GameResultsList.module.css';\r\n\r\ninterface GameResultsListProps {\r\n    /** The game results groups sorted in descending order */\r\n    gameResults: GameResultsGroup[];\r\n}\r\nconst GameResultsList: React.FunctionComponent<GameResultsListProps> = props => {\r\n    const getIconForPlace = (place: number): JSX.Element => {\r\n        const baseUrl = process.env.PUBLIC_URL + '/assets';\r\n        switch (place) {\r\n            case 1:\r\n                return <img src={`${baseUrl}/first_place_trophy.svg`} className={styles.first_place_trophy} alt=\"1. Platz\" />;\r\n            case 2:\r\n                return <img src={`${baseUrl}/second_place_trophy.svg`} className={styles.second_place_trophy} alt=\"2. Platz\" />;\r\n            case 3:\r\n                return <img src={`${baseUrl}/third_place_trophy.svg`} className={styles.third_place_trophy} alt=\"3. Platz\" />;\r\n            default:\r\n                return <FaceIcon fontSize=\"large\" />;\r\n        }\r\n    };\r\n    return (\r\n        <List component=\"ol\">\r\n            {props.gameResults.map((resultsGroup, index) => (\r\n                <ListItem key={'results-for-player-' + index} className={styles.game_results_item}>\r\n                    <ListItemIcon className={styles.icon}>\r\n                        {getIconForPlace(index + 1)}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        className={index === 0 ? styles.first_place_text : styles.other_place_text}\r\n                        primary={joinWithAnd(resultsGroup.playerNames, 'und')}\r\n                        secondary={`${resultsGroup.points} Punkte`}\r\n                    />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default GameResultsList;\r\n","import { Tooltip } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React from 'react';\r\n\r\nimport { GameConfig, GameRound, PlayerInput } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(255, 255, 255, 0.5)',\r\n            },\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n            maxWidth: '8rem',\r\n            '&:not(:last-child)': {\r\n                borderRight: '1px solid rgba(224, 224, 224, 1)',\r\n            },\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    tableContainer: {\r\n        borderRadius: 0,\r\n    },\r\n    table: {\r\n        maxWidth: '80vw',\r\n    },\r\n    firstColumn: {\r\n        fontWeight: 'bold',\r\n    },\r\n    invalidInput: {\r\n        color: 'crimson',\r\n        textDecoration: 'line-through',\r\n    },\r\n    creativeAnswerStarIcon: {\r\n        paddingRight: '0.2rem',\r\n        fontSize: '1rem',\r\n        verticalAlign: 'text-top',\r\n    }\r\n});\r\n\r\ninterface GameRoundsTableProps {\r\n    gameConfig: GameConfig;\r\n    gameRound: GameRound;\r\n    roundNo: number;\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\nconst GameRoundsTable: React.FunctionComponent<GameRoundsTableProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, gameRound, roundNo, sortedPlayers } = props;\r\n\r\n    const veryCreativeAnswer = (playerInput: PlayerInput): JSX.Element => (\r\n        <React.Fragment>\r\n            <Tooltip\r\n                title=\"Als besonders kreativ markiert\"\r\n                placement=\"bottom\"\r\n            >\r\n                <StarIcon className={classes.creativeAnswerStarIcon} color=\"secondary\" />\r\n            </Tooltip>\r\n            <span>{playerInput.text} (+{playerInput.points})</span>\r\n        </React.Fragment>\r\n    );\r\n    const createTableRowForCategory = (category: string, categoryIndex: number): JSX.Element => {\r\n        return (\r\n            <StyledTableRow key={`slf-table-row-for-category-${categoryIndex}`}>\r\n                <StyledTableCell component=\"th\" scope=\"row\" className={classes.firstColumn}>{category}</StyledTableCell>\r\n                {sortedPlayers.map((player, playerIndex) => {\r\n                    const playerInput = (gameRound.get(player.id) as PlayerInput[])[categoryIndex];\r\n                    return (\r\n                        <StyledTableCell\r\n                            key={`slf-table-cell-for-category-${categoryIndex}-player-${playerIndex}`}\r\n                            className={!playerInput.valid ? classes.invalidInput : ''}\r\n                            align=\"right\"\r\n                        >\r\n                            {playerInput.valid && playerInput.stars > 0 ? veryCreativeAnswer(playerInput) : null}\r\n                            {playerInput.valid && playerInput.stars === 0 ? `${playerInput.text} (+${playerInput.points})` : null}\r\n                            {!playerInput.valid && !!playerInput.text ? playerInput.text : null}\r\n                            {!playerInput.valid && !playerInput.text ? <span className=\"sr-only\">Leere Antwort</span> : null}\r\n                        </StyledTableCell>\r\n                    );\r\n                })}\r\n            </StyledTableRow>\r\n        );\r\n    };\r\n    return (\r\n        <TableContainer component={Paper} className={classes.tableContainer}>\r\n            <Table className={classes.table} aria-label={`Runde ${roundNo} im Detail`}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Kategorie</StyledTableCell>\r\n                        {sortedPlayers.map((player, playerIndex) => (\r\n                            <StyledTableCell\r\n                                key={`slf-table-head-cell-for-player-${playerIndex}`}\r\n                                align=\"right\"\r\n                            >{player.name}</StyledTableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {gameConfig.categories.map(createTableRowForCategory)}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default GameRoundsTable;\r\n","import { Button, Dialog, DialogActions, DialogContent, makeStyles, Theme } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport React, { useState } from 'react';\r\nimport { GameConfig, GameRound } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport GameRoundsTable from '../GameRoundsTable/GameRoundsTable';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\nconst TabPanel: React.FunctionComponent<TabPanelProps> = props => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst a11yProps = (index: number) => ({\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        padding: '0 !important',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport interface GameRoundsOverviewDialogProps {\r\n    gameConfig: GameConfig;\r\n    open: boolean;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n    onClose: () => void;\r\n}\r\nconst GameRoundsOverviewDialog: React.FunctionComponent<GameRoundsOverviewDialogProps> = props => {\r\n    const classes = useStyles();\r\n    const { gameConfig, open, rounds, sortedPlayers, onClose } = props;\r\n    const [tabValue, setTabValue] = React.useState(0);\r\n    const handleChange = (event: React.ChangeEvent<any>, newValue: number) => setTabValue(newValue);\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={tabValue}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"secondary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {rounds.map((_, index) => (\r\n                            <Tab\r\n                                key={`slf-game-rounds-overview-tab-${index}`}\r\n                                label={`Runde ${index + 1}: ${gameConfig.letters[index]}`}\r\n                                {...a11yProps(index)}\r\n                            />\r\n                        ))}\r\n                    </Tabs>\r\n                </AppBar>\r\n                {rounds.map((round, index) => (\r\n                    <TabPanel\r\n                        key={`slf-game-rounds-overview-tab-panel-${index}`}\r\n                        value={tabValue}\r\n                        index={index}\r\n                    >\r\n                        <GameRoundsTable\r\n                            gameConfig={gameConfig}\r\n                            gameRound={round}\r\n                            roundNo={index + 1}\r\n                            sortedPlayers={sortedPlayers}\r\n                        />\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface GameRoundsOverviewButtonProps {\r\n    gameConfig: GameConfig;\r\n    rounds: GameRound[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs, scoring etc. of all rounds.\r\n * The displayed data is organized in tabs, one tab per round.\r\n */\r\nconst GameRoundsOverviewButton: React.FunctionComponent<GameRoundsOverviewButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<EventNoteIcon />}\r\n                onClick={() => setOpen(true)}\r\n            >Alle Runden im Detail</Button>\r\n            <GameRoundsOverviewDialog\r\n                gameConfig={props.gameConfig}\r\n                open={open}\r\n                rounds={props.rounds}\r\n                sortedPlayers={props.sortedPlayers}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GameRoundsOverviewButton;\r\n","import {\r\n    Button,\r\n    Chip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    Divider,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport React, { useState } from 'react';\r\n\r\nimport { HallOfFameEntry } from '../../models/game.interface';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        paddingBottom: 0,\r\n    },\r\n    listItem: {\r\n        padding: '0.25rem 0',\r\n    },\r\n    listItemAvatar: {\r\n        marginRight: '1rem',\r\n    },\r\n    primary: {\r\n        color: '#555555',\r\n        fontSize: '0.875rem',\r\n    },\r\n    secondary: {\r\n        color: 'black',\r\n        fontSize: '1rem',\r\n    }\r\n});\r\n\r\nexport interface HallOfFameDialogProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\nconst HallOfFameDialog: React.FunctionComponent<HallOfFameDialogProps> = props => {\r\n    const styles = useStyles();\r\n    const { hallOfFameData, open, onClose } = props;\r\n    return (\r\n        <Dialog onClose={onClose} open={open} maxWidth=\"lg\">\r\n            <DialogContent>\r\n                <DialogContentText>Hall of Fame</DialogContentText>\r\n                <Divider />\r\n                <List className={styles.list}>\r\n                    {hallOfFameData.map((item, index) => (\r\n                        <ListItem key={`slf-hall-of-fame-item-${index}`} className={styles.listItem}>\r\n                            <ListItemAvatar className={styles.listItemAvatar}>\r\n                                <Chip\r\n                                    icon={<FaceIcon />}\r\n                                    color=\"primary\"\r\n                                    label={item.playerName}\r\n                                />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={item.category}\r\n                                secondary={item.text}\r\n                                classes={{ primary: styles.primary, secondary: styles.secondary }}\r\n                            />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button type=\"button\" onClick={onClose}>Schließen</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\ninterface HallOfFameButtonProps {\r\n    hallOfFameData: HallOfFameEntry[];\r\n}\r\n\r\n/**\r\n * Displays a button that opens a dialog with all player inputs that received \"creative answer\" stars.\r\n */\r\nconst HallOfFameButton: React.FunctionComponent<HallOfFameButtonProps> = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                startIcon={<StarIcon />}\r\n                disabled={props.hallOfFameData.length === 0}\r\n                onClick={() => setOpen(true)}\r\n            >\r\n                <span lang=\"en\">Hall of Fame</span>\r\n                <span className=\"sr-only\">(Liste der besonders kreativen Antworten)</span>\r\n            </Button>\r\n            <HallOfFameDialog\r\n                hallOfFameData={props.hallOfFameData}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HallOfFameButton;\r\n","import { Divider } from '@material-ui/core';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouterProps } from 'react-router';\r\n\r\nimport FireworksAnimation from '../../components/FireworksAnimation/FireworksAnimation';\r\nimport GameResultsList from '../../components/GameResultsList/GameResultsList';\r\nimport GameRoundsOverviewButton from '../../components/GameRoundsOverviewButton/GameRoundsOverviewButton';\r\nimport HallOfFameButton from '../../components/HallOfFameButton/HallOfFameButton';\r\nimport ScoringOptionsList from '../../components/ScoringOptionsList/ScoringOptionsList';\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport ToDashboardButton from '../../components/ToDashboardButton/ToDashboardButton';\r\nimport { GameConfig, GameResultsGroup, GameRound, HallOfFameEntry } from '../../models/game.interface';\r\nimport { PlayerInfo } from '../../models/player.interface';\r\nimport { AppAction, resetAppState } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { calculateGameResults, createHallOfFameData, getPlayersInAlphabeticalOrder } from '../../utils/game.utils';\r\nimport styles from './GameResults.module.css';\r\n\r\ninterface GameResultsDispatchProps {\r\n    onResetAppState: () => void;\r\n}\r\ninterface GameResultsProps extends AppState, GameResultsDispatchProps, RouterProps { }\r\ninterface GameResultsState {\r\n    gameConfig: GameConfig | null;\r\n    gameResults: GameResultsGroup[];\r\n    gameRounds: GameRound[];\r\n    hallOfFameData: HallOfFameEntry[];\r\n    sortedPlayers: PlayerInfo[];\r\n}\r\n\r\nclass GameResults extends Component<GameResultsProps, GameResultsState> {\r\n    public state: GameResultsState = {\r\n        gameConfig: null,\r\n        gameResults: [],\r\n        gameRounds: [],\r\n        hallOfFameData: [],\r\n        sortedPlayers: []\r\n    };\r\n\r\n    public render() {\r\n        if (this.state.gameConfig === null) { return null; }\r\n        const { gameConfig, gameResults, gameRounds, hallOfFameData, sortedPlayers } = this.state;\r\n        const gameResultsElement = (\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader text=\"Ergebnis\"></SectionHeader>\r\n                <p className=\"sr-only\" role=\"alert\">\r\n                    Das Spiel ist zu Ende. Die Ergebnisse werden angezeigt.\r\n                </p>\r\n                <GameResultsList gameResults={gameResults} />\r\n                <Divider />\r\n                <div className={styles.button_wrapper}>\r\n                    <GameRoundsOverviewButton\r\n                        gameConfig={gameConfig}\r\n                        rounds={gameRounds}\r\n                        sortedPlayers={sortedPlayers}\r\n                    />\r\n                    <HallOfFameButton hallOfFameData={hallOfFameData} />\r\n                </div>\r\n            </div>\r\n        );\r\n        const gameSettingsElement = (\r\n            <div className=\"material-card-style\">\r\n                <SectionHeader text=\"Spieleinstellungen\"></SectionHeader>\r\n                <div className=\"game-settings\">\r\n                    <h4>Runden</h4>\r\n                    <p>{gameConfig.numberOfRounds}</p>\r\n                    <h4>Buchstaben</h4>\r\n                    <p>{gameConfig.letters.join(', ')}</p>\r\n                    <h4>Kategorien</h4>\r\n                    <p>{gameConfig.categories.join(', ')}</p>\r\n                </div>\r\n                <ScoringOptionsList isForGameResultsPage={true} rules={gameConfig.scoringOptions} />\r\n            </div>\r\n        );\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"main-content-wrapper\">\r\n                    {gameResultsElement}\r\n                    {gameSettingsElement}\r\n                    <ToDashboardButton onReturnToDashboard={() => this.props.history.push('/')} />\r\n                </div>\r\n                <FireworksAnimation duration={6000} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { allPlayers, gameConfig, gameRounds } = this.props;\r\n        // If there is no data present in application state, then reroute user to dashboard.\r\n        if (allPlayers === null || gameConfig === null || gameRounds === null) {\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.setState({\r\n                gameConfig,\r\n                gameResults: calculateGameResults(allPlayers, gameRounds),\r\n                gameRounds,\r\n                hallOfFameData: createHallOfFameData(allPlayers, gameConfig, gameRounds),\r\n                sortedPlayers: getPlayersInAlphabeticalOrder(allPlayers)\r\n            });\r\n            this.props.onResetAppState();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppState => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): GameResultsDispatchProps => {\r\n    return {\r\n        onResetAppState: () => dispatch(resetAppState())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n"],"sourceRoot":""}