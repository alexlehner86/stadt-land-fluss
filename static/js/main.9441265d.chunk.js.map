{"version":3,"sources":["components/Header/Header.tsx","components/NewVersionSnackbar/NewVersionSnackbar.tsx","containers/Dashboard/Dashboard.tsx","serviceWorker.ts","App.tsx","store/app.reducer.ts","index.tsx","store/app.actions.ts","containers/Dashboard/Dashboard.module.css","utils/local-storage.utils.ts","utils/general.utils.ts","constants/themes.constant.ts","constants/app.constant.ts","constants/game.constant.ts","components/SectionHeader/SectionHeader.tsx","components/LoadingScreen/LoadingScreen.tsx"],"names":["Header","state","isFullscreenActive","subtitle","this","props","playerName","fullscreenButtonTitle","className","theme","aria-hidden","packageJson","version","IconButton","size","title","aria-label","disabled","location","pathname","onClick","history","push","fontSize","toggleFullscreen","document","addEventListener","setState","fullscreenElement","closeFullscreen","openFullscreen","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","Component","withRouter","connect","playerInfo","name","NewVersionSnackbar","useSnackbar","enqueueSnackbar","closeSnackbar","persist","variant","action","Button","updateServiceWorker","Dashboard","anchorEl","handleThemePickerClick","event","currentTarget","handleThemePickerMenuClose","handleThemePickerMenuItemClick","selectedTheme","onSetAppTheme","setAppThemeIdInLocalStorage","id","rejoinRunningGame","onPrepareRejoiningGame","rejoinGameElement","Link","component","styles","rejoin_game_button","SectionHeader","text","link_container","gameId","RouterLink","to","image_wrapper","src","activeTheme","homepageImageUrl","alt","slf_image","theme_picker_button","aria-controls","aria-haspopup","theme_picker_button_icon","Menu","keepMounted","open","Boolean","onClose","AppThemes","map","item","index","MenuItem","displayName","footer_links","separator","dispatch","prepareRejoiningGame","payload","setAppTheme","isLocalhost","window","hostname","match","register","config","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","a11yStatementPromise","aboutTheGamePromise","gameManualPromise","joinGamePromise","newGamePromise","playGamePromise","AboutTheGame","lazy","AccessibilityStatement","GameManual","GameResults","JoinGame","NewGame","PlayGame","backspaceDisabler","require","App","waitingWorker","newVersionAvailable","restoreAppTheme","appThemeId","getAppThemeIdFromLocalStorage","appTheme","find","restorePlayerInfo","nowTimestamp","storedPlayerInfo","getPlayerInfoFromLocalStorage","idCreationTimestamp","MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS","uuidv4","setPlayerInfoInLocalStorage","onSetStoredPlayerInfo","restoreRunningGameInfo","runningGameInfo","getRunningGameInfoFromLocalStorage","MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS","onSetStoredRunningGameInfo","removeAllDataOfRunningGameFromLocalStorage","onServiceWorkerUpdate","includes","waiting","postMessage","type","SERVICE_WORKER_SKIP_WAITING","mainContent","style","fallback","LoadingScreen","path","exact","newVersionSnackbar","ThemeProvider","muiTheme","maxSnack","basename","disable","convertDateToUnixTimestamp","Date","setStoredPlayerInfo","setStoredRunningGameInfo","initialState","allPlayers","gameConfig","gameRounds","isRejoiningGame","joinGameErrorMessage","playerIdCreationTimestamp","appStore","createStore","storedRunningGameInfo","resetAppStatePayload","SET_APP_THEME","SET_STORED_PLAYER_INFO","isAdmin","SET_STORED_RUNNING_GAME_INFO","isPlayerAdmin","SET_DATA_FOR_NEW_GAME","SET_DATA_OF_FINISHED_GAME","RESET_APP_STATE","PREPARE_REJOINING_GAME","ReactDOM","render","store","StylesProvider","injectFirst","getElementById","setDataForNewGame","setDataOfFinishedGame","resetAppState","module","exports","APP_THEME_LS_KEY","PLAYER_INFO_LS_KEY","RUNNING_GAME_CREATIVE_STARS_LS_KEY","RUNNING_GAME_INFO_LS_KEY","RUNNING_GAME_CONFIG_LS_KEY","RUNNING_GAME_ROUND_LS_KEY_PREFIX","localStorage","getItem","setItem","storedData","JSON","parse","data","stringify","setRunningGameInfoInLocalStorage","getRunningGameConfigFromLocalStorage","setRunningGameConfigInLocalStorage","getRunningGameCreativeStarsFromLocalStorage","convertCollectionToMap","Map","setRunningGameCreativeStarsInLocalStorage","convertMapToCollection","removeRunningGameCreativeStarsFromLocalStorage","removeItem","getRunningGameRoundFromLocalStorage","round","setRunningGameRoundInLocalStorage","i","MAX_NUMBER_OF_ROUNDS","copyToClipboard","element","createElement","value","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","createAndFillArray","length","Array","fill","makePluralIfCountIsNotOne","count","singular","plural","joinWithAnd","items","andWord","lastItemIndex","itemsWithoutLast","slice","join","dateToConvert","getTime","collectionToConvert","dataAsMap","Object","keys","forEach","key","set","mapToConvert","dataAsCollection","getCleanText","toLowerCase","replace","APP_THEME_ID","green","animationBackgroundColor","createMuiTheme","palette","primary","main","secondary","red","background","blue","deepOrange","orange","indigo","pink","purple","teal","black","grey","blueGrey","PLAYER_NAME_MAX_LENGTH","GamePhase","DEFAULT_NUMBER_OF_ROUNDS","MIN_NUMBER_OF_ROUNDS","MIN_NUMBER_OF_CATEGORIES","DEFAULT_DURATION_OF_COUNTDOWN","MIN_DURATION_OF_COUNTDOWN","STANDARD_ALPHABET","STANDARD_EXCLUDED_LETTERS","STANDARD_CATEGORIES","AVAILABLE_CATEGORIES","MIN_NUMBER_OF_PLAYERS","LETTER_ANIMATION_LETTER_COUNT","LETTER_ANIMATION_REDRAW_SPEED","SAME_WORD_POINTS","STANDARD_POINTS","ONLY_ANSWER_POINTS","EXTRA_POINTS","GAME_OPTION_LABEL","checkForDuplicates","creativeAnswersExtraPoints","onlyPlayerWithValidAnswer","Fragment","useStyles","makeStyles","loadingScreen","top","height","width","backgroundColor","loadingSpinner","transform","loadingSpinnerSize","waitingForPlayers","bottom","maxWidth","margin","classes","color","role"],"mappings":"2dAsBaA,EAAb,4MACWC,MAAQ,CAAEC,oBAAoB,GADzC,uDAGqB,IAAD,OACNC,EAAWC,KAAKC,MAAMC,WAAX,gBAAiCF,KAAKC,MAAMC,YAAe,kBACtEC,EAAwBH,KAAKH,MAAMC,mBAAqB,wBAA0B,wBACxF,OACI,yBAAQM,UAAW,cAAgBJ,KAAKC,MAAMI,MAAMD,UAApD,UACI,kDACA,4BAAIL,IACJ,qBAAKK,UAAU,gBAAf,SACI,8BACI,sBAAME,cAAY,OAAlB,eACA,sBAAMF,UAAU,UAAhB,qBACCG,EAAYC,aAGrB,sBAAKJ,UAAU,eAAf,UACI,cAACK,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,gBACNC,aAAW,gBACXC,SAA2C,MAAjCb,KAAKC,MAAMa,SAASC,SAC9BC,QAAS,kBAAM,EAAKf,MAAMgB,QAAQC,KAAK,MAL3C,SAOI,cAAC,IAAD,CAAeC,SAAS,YAE5B,cAACV,EAAA,EAAD,CACIC,KAAK,QACLC,MAAOR,EACPS,aAAYT,EACZa,QAAS,kBAAM,EAAKI,oBAJxB,SAMKpB,KAAKH,MAAMC,mBAAqB,cAAC,IAAD,CAAoBqB,SAAS,UAAa,cAAC,IAAD,CAAgBA,SAAS,oBAjC5H,0CAwCgC,IAAD,OACvBE,SAASC,iBAAiB,oBAAoB,WAG1C,EAAKC,SAAS,CAAEzB,qBAAsBuB,SAASG,yBA5C3D,yCAiDYxB,KAAKH,MAAMC,mBACXE,KAAKyB,kBAELzB,KAAK0B,mBApDjB,uCAyDQ,IAAMC,EAAON,SAASO,gBAClBD,EAAKE,kBACLF,EAAKE,oBACGF,EAAaG,qBACpBH,EAAaG,uBACNH,EAAaI,wBACpBJ,EAAaI,0BACNJ,EAAaK,qBACpBL,EAAaK,wBAjE1B,wCAsEYX,SAASY,eACTZ,SAASY,iBACDZ,SAAiBa,oBACxBb,SAAiBa,sBACVb,SAAiBc,qBACxBd,SAAiBc,uBACVd,SAAiBe,kBACxBf,SAAiBe,uBA7E9B,GAA4BC,aAuFbC,cAAWC,aALF,SAAC1C,GACrB,MAAO,CACHK,WAAYL,EAAM2C,WAAa3C,EAAM2C,WAAWC,KAAO,MAGrCF,CAAyB3C,I,iBClFpC8C,EAnB8D,SAAAzC,GAAU,IAAD,EACvC0C,cAAnCC,EAD0E,EAC1EA,gBAD0E,EACzDC,cAezB,OALAD,EAAgB,qCAAmC,CAC/CE,SAAS,EACTC,QAAS,UACTC,OAZkB,kBAClB,cAACC,EAAA,EAAD,CACI7C,UAAU,kBACVM,KAAK,QACLM,QAASf,EAAMiD,oBAHnB,8BAaG,M,sHCILC,E,4MACKtD,MAAQ,CAAEuD,SAAU,M,EAgEnBC,uBAAyB,SAACC,GAC9B,EAAK/B,SAAS,CAAE6B,SAAUE,EAAMC,iB,EAG5BC,2BAA6B,WACjC,EAAKjC,SAAS,CAAE6B,SAAU,Q,EAGtBK,+BAAiC,SAACC,GACtC,EAAKnC,SAAS,CAAE6B,SAAU,OAC1B,EAAKnD,MAAM0D,cAAcD,GACzBE,YAA4BF,EAAcG,K,EAGtCC,kBAAoB,WACxB,EAAK7D,MAAM8D,yBACX,EAAK9D,MAAMgB,QAAQC,KAAK,U,uDA9EX,IAAD,OACN8C,EACF,eAACC,EAAA,EAAD,CACIC,UAAU,SACV9D,UAAW+D,IAAOC,mBAClBpD,QAAShB,KAAK8D,kBAHlB,UAKI,cAAC,IAAD,IALJ,kCASJ,OACI,qBAAK1D,UAAU,uBAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,cAACiE,EAAA,EAAD,CAAeC,KAAK,cACpB,sBAAKlE,UAAW+D,IAAOI,eAAvB,UACKvE,KAAKC,MAAMuE,OAASR,EAAoB,KACzC,cAACC,EAAA,EAAD,CAAMC,UAAWO,IAAYC,GAAG,WAAhC,yBACA,cAACT,EAAA,EAAD,CAAMC,UAAWO,IAAYC,GAAG,YAAhC,6BACA,cAACT,EAAA,EAAD,CAAMC,UAAWO,IAAYC,GAAG,UAAhC,+BAEJ,sBAAKtE,UAAW+D,IAAOQ,cAAvB,UACI,qBACIC,IAAK5E,KAAKC,MAAM4E,YAAYC,iBAC5BC,IAAI,GACJ3E,UAAW+D,IAAOa,YAEtB,wBACI5E,UAAW+D,IAAOc,oBAClBtE,MAAM,mBACNC,aAAW,mBACXsE,gBAAc,oBACdC,gBAAc,OACdnE,QAAShB,KAAKqD,uBANlB,SAQI,cAAC,IAAD,CAAWlC,SAAS,QAAQf,UAAW+D,IAAOiB,6BAElD,cAACC,EAAA,EAAD,CACIxB,GAAG,oBACHT,SAAUpD,KAAKH,MAAMuD,SACrBkC,aAAW,EACXC,KAAMC,QAAQxF,KAAKH,MAAMuD,UACzBqC,QAASzF,KAAKwD,2BALlB,SAOKkC,IAAUC,KAAI,SAACC,EAAMC,GAAP,OACX,cAACC,EAAA,EAAD,CAEI9E,QAAS,kBAAM,EAAKyC,+BAA+BmC,IAFvD,SAGEA,EAAKG,aAFE,0BAA4BF,WAMjD,sBAAKzF,UAAW+D,IAAO6B,aAAvB,UACI,cAAC,IAAD,CAAYtB,GAAG,SAAf,+BACA,qBAAKtE,UAAW+D,IAAO8B,UAAW3F,cAAY,OAA9C,eACA,cAAC,IAAD,CAAYoE,GAAG,iBAAf,uD,GA1DArC,aAiGTE,eAZS,SAAC1C,GACrB,MAAO,CACHgF,YAAahF,EAAMgF,YACnBL,OAAQ3E,EAAM2E,WAGK,SAAC0B,GACxB,MAAO,CACHnC,uBAAwB,kBAAMmC,EAASC,gBACvCxC,cAAe,SAACyC,GAAD,OAAuBF,EAASG,YAAYD,QAGpD7D,CAA6CY,GCjHtDmD,EAAcd,QACa,cAA7Be,OAAOzF,SAAS0F,UAEa,UAA7BD,OAAOzF,SAAS0F,UAEhBD,OAAOzF,SAAS0F,SAASC,MACrB,2DASD,SAASC,EAASC,GACrB,GAA6C,kBAAmBC,UAAW,CAMvE,GAJkB,IAAIC,IAClBC,oBACAP,OAAOzF,SAASiG,MAENC,SAAWT,OAAOzF,SAASkG,OAIrC,OAGJT,OAAOjF,iBAAiB,QAAQ,WAC5B,IAAM2F,EAAK,UAAMH,oBAAN,sBAEPR,IAgEhB,SAAiCW,EAAeN,GAE5CO,MAAMD,EAAO,CACTE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAAC,GAEF,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cb,UAAUc,cAAcC,MAAMP,MAAK,SAAAQ,GAC/BA,EAAaC,aAAaT,MAAK,WAC3Bb,OAAOzF,SAASgH,eAKxBC,EAAgBd,EAAON,MAG9BqB,OAAM,WACHC,QAAQC,IACJ,oEAvFAC,CAAwBlB,EAAON,GAI/BC,UAAUc,cAAcC,MAAMP,MAAK,WAC/Ba,QAAQC,IACJ,iHAMRH,EAAgBd,EAAON,OAMvC,SAASoB,EAAgBd,EAAeN,GACpCC,UAAUc,cACLhB,SAASO,GACTG,MAAK,SAAAQ,GACFA,EAAaQ,cAAgB,WACzB,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBxI,QACb+G,UAAUc,cAAcc,YAIxBP,QAAQC,IACJ,iHAKAvB,GAAUA,EAAO8B,UACjB9B,EAAO8B,SAASb,KAMpBK,QAAQC,IAAI,sCAGRvB,GAAUA,EAAO+B,WACjB/B,EAAO+B,UAAUd,WAOxCI,OAAM,SAAAW,GACHV,QAAQU,MAAM,4CAA6CA,M,YCrE1DC,EAAuB,+BACvBC,GAAsB,+BACtBC,GAAoB,+BACpBC,GAAkB,oDAClBC,GAAiB,0EACjBC,GAAkB,yEAGzBC,GAAeC,gBAAK,kBAAMN,MAC1BO,GAAyBD,gBAAK,kBAAMP,KACpCS,GAAaF,gBAAK,kBAAML,MACxBQ,GAAcH,gBAAK,kBAAM,uEACzBI,GAAWJ,gBAAK,kBAAMJ,MACtBS,GAAUL,gBAAK,kBAAMH,MACrBS,GAAWN,gBAAK,kBAAMF,MAGtBS,GAAoBC,EAAQ,KAiB5BC,G,4MACK/J,MAA2B,CAC9BgK,cAAe,KACfC,qBAAqB,G,EAqDjBC,gBAAkB,WACtB,IAAMC,EAAaC,cACnB,GAAID,EAAY,CACZ,IAAME,EAAWxE,IAAUyE,MAAK,SAAA9J,GAAK,OAAIA,EAAMwD,KAAOmG,KAClDE,GACA,EAAKjK,MAAM0D,cAAcuG,K,EAK7BE,kBAAoB,SAACC,GACzB,IAAIC,EAAmBC,gBAElBD,GAAoBD,EAAeC,EAAiBE,oBAAsBC,OAC3EH,EAAmB,CAAEzG,GAAI6G,cAAUF,oBAAqBH,EAAc5H,KAAM6H,EAAmBA,EAAiB7H,KAAO,IACvHkI,YAA4BL,IAEhC,EAAKrK,MAAM2K,sBAAsBN,I,EAG7BO,uBAAyB,SAACR,GAC9B,IAAMS,EAAkBC,cACpBD,IAEIT,EAAeS,EAAgBN,qBAAuBQ,IACtD,EAAK/K,MAAMgL,2BAA2BH,GAEtCI,gB,EAKJC,sBAAwB,SAACvD,GAExBrB,OAAOzF,SAASiG,KAAKqE,SAAS,UAC/B,EAAK7J,SAAS,CACVsI,cAAejC,GAAgBA,EAAayD,QAC5CvB,qBAAqB,K,EAKzB5G,oBAAsB,WAAa,IAC/B2G,EAAkB,EAAKhK,MAAvBgK,cACRA,GAAiBA,EAAcyB,YAAY,CAAEC,KAAMC,MACnD,EAAKjK,SAAS,CAAEuI,qBAAqB,IACrCvD,OAAOzF,SAASgH,U,uDA/FhB,IAAM2D,EACF,sBACIrL,UAAW,YAAcJ,KAAKC,MAAM4E,YAAYzE,UAChDsL,MAAO1L,KAAKC,MAAM4E,YAAY6G,MAFlC,SAII,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAAC5H,UAAWgF,KACtC,cAAC,IAAD,CAAO2C,KAAK,iBAAiBC,OAAK,EAAC5H,UAAWkF,KAC9C,cAAC,IAAD,CAAOyC,KAAK,YAAYC,OAAK,EAAC5H,UAAWqF,KACzC,cAAC,IAAD,CAAOsC,KAAK,UAAUC,OAAK,EAAC5H,UAAWmF,KACvC,cAAC,IAAD,CAAOwC,KAAK,WAAWC,OAAK,EAAC5H,UAAWsF,KACxC,cAAC,IAAD,CAAOqC,KAAK,QAAQC,OAAK,EAAC5H,UAAWuF,KACrC,cAAC,IAAD,CAAOoC,KAAK,WAAWC,OAAK,EAAC5H,UAAWoF,KACxC,cAAC,IAAD,CAAOuC,KAAK,IAAI3H,UAAWf,WAKrC4I,EACF,cAAC,EAAD,CAAoB7I,oBAAqBlD,KAAKkD,sBAElD,OACI,cAAC8I,EAAA,EAAD,CAAe3L,MAAOL,KAAKC,MAAM4E,YAAYoH,SAA7C,SACI,eAAC,IAAD,CAAkBC,SAAU,EAA5B,UACI,cAAC,IAAD,UACI,qBAAK9L,UAAU,gBAAf,SACI,eAAC,IAAD,CAAY+L,SAAUrF,oBAAtB,UACI,cAAC,EAAD,CAAQzG,MAAOL,KAAKC,MAAM4E,cACzB4G,SAIZzL,KAAKH,MAAMiK,oBAAsBiC,EAAqB,Y,0CAOnErE,EAAuB,CAAEe,SAAUzI,KAAKmL,wBAExCzB,GAAkB0C,UAClBpM,KAAK+J,kBACL,IAAMM,EAAegC,YAA2B,IAAIC,MACpDtM,KAAKoK,kBAAkBC,GACvBrK,KAAK6K,uBAAuBR,O,GArDlBhI,aAsHHE,gBAZS,SAAC1C,GACrB,MAAO,CACHgF,YAAahF,EAAMgF,gBAGA,SAACqB,GACxB,MAAO,CACHvC,cAAe,SAACyC,GAAD,OAAuBF,EAASG,YAAYD,KAC3DwE,sBAAuB,SAACxE,GAAD,OAA+BF,EAASqG,YAAoBnG,KACnF6E,2BAA4B,SAAC7E,GAAD,OAAoCF,EAASsG,YAAyBpG,QAG3F7D,CAA6CqH,I,SCxJtD6C,GAAyB,CAC3B5H,YAAaa,IAAU,GACvBgH,WAAY,KACZlI,OAAQ,KACRmI,WAAY,KACZC,WAAY,KACZC,iBAAiB,EACjBC,qBAAsB,KACtBC,0BAA2B,EAC3BvK,WAAY,MCjCHwK,GAAWC,aDoCE,WAAkE,IACpF3C,EACA4C,EACAC,EAHmBtN,EAAgE,uDAA9C4M,GAAczJ,EAAgC,uCAIvF,OAAQA,EAAOuI,MACX,KAAK6B,IACD,OAAO,6BAAKvN,GAAZ,IAAmBgF,YAAc7B,EAA6BoD,UAClE,KAAKiH,IAED,OADA/C,EAAoBtH,EAAqCoD,QAClD,6BACAvG,GADP,IAEIgN,iBAAiB,EACjBE,0BAA2BzC,EAAiBE,oBAC5ChI,WAAY,CACRqB,GAAIyG,EAAiBzG,GACrByJ,SAAS,EACT7K,KAAM6H,EAAiB7H,QAGnC,KAAK8K,IAED,OADAL,EAAyBlK,EAA0CoD,QAC5D,6BACAvG,GADP,IAEIgN,iBAAiB,EACjBrI,OAAQ0I,EAAsB1I,OAC9BhC,WAAW,6BACJ3C,EAAM2C,YADH,IAEN8K,QAASJ,EAAsBM,kBAG3C,KAAKC,IACD,OAAO,0CACA5N,GACCmD,EAAmCoD,SAF3C,IAGI0G,qBAAsB,OAE9B,KAAKY,IACD,OAAO,0CACA7N,GACCmD,EAAuCoD,SAF/C,IAII5B,OAAQ,OAEhB,KAAKmJ,IAED,OADAR,EAAwBnK,EAA+BoD,QAChD,6BACAvG,GADP,IAEI6M,WAAY,KACZlI,OAAQ,KACRmI,WAAY,KACZC,WAAY,KACZE,qBAAsBK,EAAuBA,EAAqBL,qBAAuB,OAEjG,KAAKc,IACD,OAAO,6BACA/N,GADP,IAEIgN,iBAAiB,IAEzB,QACI,OAAOhN,MC7FnBgO,IAASC,OACL,cAAC,IAAD,CAAUC,MAAOf,GAAjB,SACI,cAACgB,EAAA,EAAD,CAAgBC,aAAW,EAA3B,SACI,cAAC,GAAD,QAGR5M,SAAS6M,eAAe,U,gCCd5B,4dAAO,IAAMd,EAAgB,gBAChBC,EAAyB,yBACzBE,EAA+B,+BAC/BE,EAAwB,wBACxBC,EAA4B,4BAC5BC,EAAkB,kBAClBC,EAAyB,yBA8CzBvH,EAAc,SAACD,GACxB,MAAO,CAAEmF,KAAM6B,EAAehH,YAErBmG,EAAsB,SAACnG,GAChC,MAAO,CAAEmF,KAAM8B,EAAwBjH,YAE9BoG,EAA2B,SAACpG,GACrC,MAAO,CAAEmF,KAAMgC,EAA8BnH,YAEpC+H,EAAoB,SAAC/H,GAC9B,MAAO,CAAEmF,KAAMkC,EAAuBrH,YAE7BgI,EAAwB,SAAChI,GAClC,MAAO,CAAEmF,KAAMmC,EAA2BtH,YAEjCiI,EAAgB,SAACjI,GAC1B,MAAO,CAAEmF,KAAMoC,EAAiBvH,YAKvBD,EAAuB,WAChC,MAAO,CAAEoF,KAAMqC,K,mBC9EnBU,EAAOC,QAAU,CAAC,eAAiB,kCAAkC,mBAAqB,sCAAsC,cAAgB,iCAAiC,oBAAsB,uCAAuC,yBAA2B,4CAA4C,UAAY,6BAA6B,aAAe,gCAAgC,UAAY,+B,gCCDzZ,gfAYMC,EAAmB,gBACnBC,EAAqB,kBACrBC,EAAqC,kCACrCC,EAA2B,wBAC3BC,EAA6B,0BAE7BC,EAAmC,0BAE5B5E,EAAgC,kBAAsB6E,aAAaC,QAAQP,IAC3E5K,EAA8B,SAACsG,GAAD,OAAkC4E,aAAaE,QAAQR,EAAkBtE,IAEvGK,EAAgC,WACzC,IAAM0E,EAAaH,aAAaC,QAAQN,GACxC,OAAOQ,EAAaC,KAAKC,MAAMF,GAAc,MAEpCtE,EAA8B,SAACyE,GAAD,OAAkCN,aAAaE,QAAQP,EAAoBS,KAAKG,UAAUD,KAExHrE,EAAqC,WAC9C,IAAMkE,EAAaH,aAAaC,QAAQJ,GACxC,OAAOM,EAAaC,KAAKC,MAAMF,GAAc,MAEpCK,EAAmC,SAACF,GAAD,OAAuCN,aAAaE,QAAQL,EAA0BO,KAAKG,UAAUD,KAExIG,EAAuC,WAChD,IAAMN,EAAaH,aAAaC,QAAQH,GACxC,OAAOK,EAAaC,KAAKC,MAAMF,GAAc,MAEpCO,EAAqC,SAACJ,GAAD,OAA4BN,aAAaE,QAAQJ,EAA4BM,KAAKG,UAAUD,KAEjIK,EAA8C,WACvD,IAAMR,EAAaH,aAAaC,QAAQL,GACxC,OAAOO,EAAaS,YAAiCR,KAAKC,MAAMF,IAAe,IAAIU,KAE1EC,EAA4C,SAACR,GACtDN,aAAaE,QACTN,EACAQ,KAAKG,UAAUQ,YAAiCT,MAG3CU,EAAiD,kBAAYhB,aAAaiB,WAAWrB,IAErFsB,EAAsC,SAACC,GAChD,IAAMhB,EAAaH,aAAaC,QAAQF,EAAmCoB,GAC3E,OAAOhB,EAAaS,YAAsCR,KAAKC,MAAMF,IAAe,MAE3EiB,EAAoC,SAACD,EAAeb,GAC7DN,aAAaE,QACTH,EAAmCoB,EACnCf,KAAKG,UAAUQ,YAAsCT,MAIhDlE,EAA6C,WACtD4D,aAAaiB,WAAWpB,GACxBG,aAAaiB,WAAWnB,GACxBE,aAAaiB,WAAWrB,GACxB,IAAK,IAAIyB,EAAI,EAAGA,GAAKC,IAAsBD,IACvCrB,aAAaiB,WAAWlB,EAAmCsB,K,gCCnEnE,gRAAO,IAAME,EAAkB,SAAC/L,GAC5B,IAAMgM,EAAUjP,SAASkP,cAAc,YACvCD,EAAQE,MAAQlM,EAChBgM,EAAQG,aAAa,WAAY,IACjCH,EAAQ5E,MAAMgF,SAAW,WACzBJ,EAAQ5E,MAAMiF,KAAO,UACrBtP,SAASuP,KAAKC,YAAYP,GAC1BA,EAAQQ,SACRzP,SAAS0P,YAAY,QACrB1P,SAASuP,KAAKI,YAAYV,IAGjBW,EAAqB,SAAIC,EAAgBV,GAClD,OAAO,IAAIW,MAAMD,GAAQE,KAAKZ,IAGrBa,EAA4B,SAACC,EAAeC,EAAkBC,GACvE,OAAiB,IAAVF,EAAcC,EAAWC,GAGvBC,EAAc,SAACC,EAAiBC,GACzC,GAAID,EAAMR,QAAU,EAChB,OAAwB,IAAjBQ,EAAMR,OAAe,GAAKQ,EAAM,GAE3C,IAAME,EAAgBF,EAAMR,OAAS,EAC/BW,EAAmBH,EAAMI,MAAM,EAAGF,GACxC,MAAM,GAAN,OAAUC,EAAiBE,KAAK,MAAhC,YAAyCJ,EAAzC,YAAoDD,EAAME,KAGjDvF,EAA6B,SAAC2F,GAAD,OAAiCA,EAAcC,UAAY,IAAO,GAE/FvC,EAAyB,SAAIwC,GACtC,IAAMC,EAAY,IAAIxC,IAEtB,OADAyC,OAAOC,KAAKH,GAAqBI,SAAQ,SAAAC,GAAG,OAAIJ,EAAUK,IAAID,EAAKL,EAAoBK,OAChFJ,GAGEtC,EAAyB,SAAI4C,GACtC,IAAMC,EAAkC,GAExC,OADAD,EAAaH,SAAQ,SAAClD,EAAMmD,GAAP,OAAeG,EAAiBH,GAAOnD,KACrDsD,GAIEC,EAAe,SAACrO,GAAD,OAA0BA,EAAKsO,cAAcC,QAAQ,cAAe,M,gCC9ChG,sCAYYC,EAZZ,0K,SAYYA,K,cAAAA,E,YAAAA,E,gBAAAA,E,YAAAA,E,eAAAA,M,KAsBL,IAAMpN,EAAwB,CACjC,CACI7B,GAAIiP,EAAaC,MACjBC,yBAA0B,mBAC1B5S,UAAW,cACX2F,YAAa,eACbjB,iBAAiB,GAAD,OAAKgC,oBAAL,wCAChBmF,SAAUgH,YAAe,CACrBC,QAAS,CAAEC,QAAS,CAAEC,KAAML,IAAM,MAAQM,UAAW,CAAED,KAAME,IAAI,SAErE5H,MAAO,CACH6H,WAAW,0FAAD,OAECzM,oBAFD,kCAKlB,CACIjD,GAAIiP,EAAaU,KACjBR,yBAA0B,mBAC1B5S,UAAW,aACX2F,YAAa,YACbjB,iBAAiB,GAAD,OAAKgC,oBAAL,uCAChBmF,SAAUgH,YAAe,CACrBC,QAAS,CAAEC,QAAS,CAAEC,KAAMI,IAAK,MAAQH,UAAW,CAAED,KAAMK,IAAU,SAE1E/H,MAAO,CACH6H,WAAW,8FAAD,OAECzM,oBAFD,+BAKlB,CACIjD,GAAIiP,EAAaY,OACjBV,yBAA0B,mBAC1B5S,UAAW,eACX2F,YAAa,gBACbjB,iBAAiB,GAAD,OAAKgC,oBAAL,yCAChBmF,SAAUgH,YAAe,CACrBC,QAAS,CAAEC,QAAS,CAAEC,KAAMK,IAAW,MAAQJ,UAAW,CAAED,KAAMO,IAAO,SAE7EjI,MAAO,CACH6H,WAAW,2FAAD,OAECzM,oBAFD,iCAKlB,CACIjD,GAAIiP,EAAac,KACjBZ,yBAA0B,oBAC1B5S,UAAW,aACX2F,YAAa,aACbjB,iBAAiB,GAAD,OAAKgC,oBAAL,uCAChBmF,SAAUgH,YACN,CAAEC,QAAS,CAAEC,QAAS,CAAEC,KAAMS,IAAO,MAAQR,UAAW,CAAED,KAAMU,IAAK,SAEzEpI,MAAO,CACH6H,WAAW,4FAAD,OAECzM,oBAFD,iCAKlB,CACIjD,GAAIiP,EAAaiB,MACjBf,yBAA0B,eAC1B5S,UAAW,cACX2F,YAAa,eACbjB,iBAAiB,GAAD,OAAKgC,oBAAL,qCAChBmF,SAAUgH,YAAe,CACrBC,QAAS,CAAEC,QAAS,CAAEC,KAAMY,IAAK,MAAQX,UAAW,CAAED,KAAMa,IAAS,SAEzEvI,MAAO,CACH6H,WAAW,wFAAD,OAECzM,oBAFD,uC,gCCzGtB,wIACO,IAAM2D,EAA6C,OAE7CO,EAA2C,KAE3CkJ,EAAyB,GAEzB1I,EAA8B,gB,gCCP3C,soBAAO,IA4DK2I,EA5DCC,EAA2B,EAC3BC,EAAuB,EACvBjE,EAAuB,GACvBkE,EAA2B,EAE3BC,EAAgC,GAChCC,EAA4B,GAE5BC,EAAoB,CAC7B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEnDC,EAA4B,CAAC,IAAK,IAAK,KAEvCC,EAAsB,CAAC,QAAS,OAAQ,qBACxCC,EAAuB,CAChC,gBACA,eACA,eACA,QACA,qBACA,YACA,qBACA,gCACA,gBACA,eACA,qBACA,aACA,aACA,kCACA,oBACA,QACA,0CACA,iCACA,gBACA,YACA,SACA,QACA,YACA,mCACA,oCACA,UACA,aACA,wBACA,WACA,kBACA,cACA,WACA,sBACA,0BACA,SACA,OACA,yBACA,yBACA,aACA,gDACA,WACA,+B,SAGQT,K,8BAAAA,E,sCAAAA,E,iCAAAA,M,KAML,IAAMU,EAAwB,EAGxBC,EAAgC,EAEhCC,EAAgC,IAEhCC,EAAmB,EACnBC,EAAkB,GAClBC,EAAqB,GAKrBC,EAAe,EAEfC,EAAoB,CAC7BC,mBAAmB,qHAAD,OACOL,EADP,kBACiCC,EADjC,YAElBK,2BAA2B,0GAAD,OACFH,EADE,mCAE1BI,0BAA0B,6HAAD,OACcL,EADd,kBAC0CD,EAD1C,c,sGChFhB5Q,EAA6D,SAAApE,GAAK,OAC3E,eAAC,IAAMuV,SAAP,WACI,oBAAIpV,UAAU,iBAAd,SAAgCH,EAAMqE,OACtC,cAAC,IAAD,S,6DCJFmR,G,KAAYC,YAAW,CACzBC,cAAe,CACXjF,SAAU,WACVkF,IAAK,IACLjF,KAAM,IACNkF,OAAQ,OACRC,MAAO,OACPC,gBAAiB,sBAErBC,eAAgB,CACZtF,SAAU,WACVkF,IAAK,MACLjF,KAAM,MACNsF,UAAW,wBACXH,MAAOI,QAEXC,kBAAmB,CACfzF,SAAU,WACV0F,OAAQ,OACRzF,KAAM,MACNsF,UAAW,mBACXI,SAAU,QACVC,OAAQ,mBAwBD1K,IAhBoD,SAAA3L,GAC/D,IAAMsW,EAAUd,IAChB,OACI,sBAAKrV,UAAWmW,EAAQZ,cAAxB,UACI,qBAAKvV,UAAWmW,EAAQP,eAAxB,SACI,cAAC,IAAD,CAAkBQ,MAAM,YAAY9V,KArCzB,OAuCdT,EAAMkW,kBACH,sBAAK/V,UAAW,uBAAyBmW,EAAQJ,kBAAmBM,KAAK,QAAzE,wBACe,sBAAMrW,UAAU,YAAhB,SAA6BH,EAAMkW,kBAAkBpE,KAAK,WAEzE,U","file":"static/js/main.9441265d.chunk.js","sourcesContent":["import './Header.css';\r\nimport { IconButton } from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport packageJson from '../../../package.json';\r\nimport { AppTheme } from '../../constants/themes.constant';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\n\r\ninterface HeaderPropsFromStore {\r\n    playerName: string | null;\r\n}\r\ninterface HeaderProps extends HeaderPropsFromStore, RouteComponentProps {\r\n    theme: AppTheme;\r\n}\r\ninterface HeaderState {\r\n    isFullscreenActive: boolean;\r\n}\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n    public state = { isFullscreenActive: false };\r\n\r\n    public render() {\r\n        const subtitle = this.props.playerName ? `Name: ${this.props.playerName}` : '(MALEX-Edition)';\r\n        const fullscreenButtonTitle = this.state.isFullscreenActive ? 'Vollbildmodus beenden' : 'Vollbildmodus starten';\r\n        return (\r\n            <header className={'app-header ' + this.props.theme.className}>\r\n                <h1>Stadt-Land-Fluss</h1>\r\n                <p>{subtitle}</p>\r\n                <div className=\"about-section\">\r\n                    <p>\r\n                        <span aria-hidden=\"true\">v</span>\r\n                        <span className=\"sr-only\">Version</span>\r\n                        {packageJson.version}\r\n                    </p>\r\n                </div>\r\n                <div className=\"icon-buttons\">\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        title=\"Zum Dashboard\"\r\n                        aria-label=\"Zum Dashboard\"\r\n                        disabled={this.props.location.pathname === '/'}\r\n                        onClick={() => this.props.history.push('/')}\r\n                    >\r\n                        <ExitToAppIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        title={fullscreenButtonTitle}\r\n                        aria-label={fullscreenButtonTitle}\r\n                        onClick={() => this.toggleFullscreen()}\r\n                    >\r\n                        {this.state.isFullscreenActive ? <FullscreenExitIcon fontSize=\"small\" /> : <FullscreenIcon fontSize=\"small\" />}\r\n                    </IconButton>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        document.addEventListener('fullscreenchange', () => {\r\n            // document.fullscreenElement will point to the element that is in fullscreen mode if there is one.\r\n            // If there isn't one, the value of the property is null.\r\n            this.setState({ isFullscreenActive: !!document.fullscreenElement });\r\n        });\r\n    }\r\n\r\n    private toggleFullscreen() {\r\n        if (this.state.isFullscreenActive) {\r\n            this.closeFullscreen();\r\n        } else {\r\n            this.openFullscreen();\r\n        }\r\n    }\r\n\r\n    private openFullscreen() {\r\n        const elem = document.documentElement;\r\n        if (elem.requestFullscreen) {\r\n            elem.requestFullscreen();\r\n        } else if ((elem as any).mozRequestFullScreen) { /* Firefox */\r\n            (elem as any).mozRequestFullScreen();\r\n        } else if ((elem as any).webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n            (elem as any).webkitRequestFullscreen();\r\n        } else if ((elem as any).msRequestFullscreen) { /* IE/Edge */\r\n            (elem as any).msRequestFullscreen();\r\n        }\r\n    }\r\n\r\n    private closeFullscreen() {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if ((document as any).mozCancelFullScreen) { /* Firefox */\r\n            (document as any).mozCancelFullScreen();\r\n        } else if ((document as any).webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n            (document as any).webkitExitFullscreen();\r\n        } else if ((document as any).msExitFullscreen) { /* IE/Edge */\r\n            (document as any).msExitFullscreen();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): HeaderPropsFromStore => {\r\n    return {\r\n        playerName: state.playerInfo ? state.playerInfo.name : ''\r\n    };\r\n};\r\nexport default withRouter(connect(mapStateToProps)(Header));\r\n","import { Button } from '@material-ui/core';\r\nimport { useSnackbar } from 'notistack';\r\nimport React from 'react';\r\n\r\ninterface NewVersionSnackbarProps {\r\n    updateServiceWorker: () => void;\r\n}\r\n\r\nconst NewVersionSnackbar: React.FunctionComponent<NewVersionSnackbarProps> = props => {\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    const refreshAction = () => (\r\n        <Button\r\n            className=\"snackbar-button\"\r\n            size=\"small\"\r\n            onClick={props.updateServiceWorker}\r\n        >\r\n            Aktualisieren\r\n        </Button>\r\n    );\r\n    enqueueSnackbar('Eine neue Version ist verfügbar', {\r\n        persist: true,\r\n        variant: 'success',\r\n        action: refreshAction\r\n    });\r\n    return null;\r\n};\r\n\r\nexport default NewVersionSnackbar;\r\n","import { Menu, MenuItem } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport BrushIcon from '@material-ui/icons/Brush';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\nimport React, { Component, Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link as RouterLink, RouteComponentProps } from 'react-router-dom';\r\n\r\nimport { SectionHeader } from '../../components/SectionHeader/SectionHeader';\r\nimport { AppTheme, AppThemes } from '../../constants/themes.constant';\r\nimport { AppAction, prepareRejoiningGame, setAppTheme } from '../../store/app.actions';\r\nimport { AppState } from '../../store/app.reducer';\r\nimport { setAppThemeIdInLocalStorage } from '../../utils/local-storage.utils';\r\nimport styles from './Dashboard.module.css';\r\n\r\ninterface DashboardPropsFromStore {\r\n    activeTheme: AppTheme\r\n    gameId: string | null;\r\n}\r\ninterface DashboardDispatchProps {\r\n    onPrepareRejoiningGame: () => void;\r\n    onSetAppTheme: (payload: AppTheme) => void;\r\n}\r\ninterface DashboardProps extends DashboardPropsFromStore, DashboardDispatchProps, RouteComponentProps { }\r\ninterface DashboardState {\r\n    anchorEl: EventTarget | null;\r\n}\r\n\r\nclass Dashboard extends Component<DashboardProps, DashboardState> {\r\n    public state = { anchorEl: null };\r\n\r\n    public render() {\r\n        const rejoinGameElement = (\r\n            <Link\r\n                component=\"button\"\r\n                className={styles.rejoin_game_button}\r\n                onClick={this.rejoinRunningGame}\r\n            >\r\n                <DirectionsRunIcon />\r\n                Zurück ins laufende Spiel\r\n            </Link>\r\n        );\r\n        return (\r\n            <div className=\"main-content-wrapper\">\r\n                <div className=\"material-card-style\">\r\n                    <SectionHeader text=\"Dashboard\"></SectionHeader>\r\n                    <nav className={styles.link_container}>\r\n                        {this.props.gameId ? rejoinGameElement : null}\r\n                        <Link component={RouterLink} to=\"/newgame\">Neues Spiel</Link>\r\n                        <Link component={RouterLink} to=\"/joingame\">Spiel beitreten</Link>\r\n                        <Link component={RouterLink} to=\"/manual\">Spielanleitung</Link>\r\n                    </nav>\r\n                    <div className={styles.image_wrapper}>\r\n                        <img\r\n                            src={this.props.activeTheme.homepageImageUrl}\r\n                            alt=\"\"\r\n                            className={styles.slf_image}\r\n                        />\r\n                        <button\r\n                            className={styles.theme_picker_button}\r\n                            title=\"Design ändern\"\r\n                            aria-label=\"Design ändern\"\r\n                            aria-controls=\"theme-picker-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.handleThemePickerClick}\r\n                        >\r\n                            <BrushIcon fontSize=\"small\" className={styles.theme_picker_button_icon} />\r\n                        </button>\r\n                        <Menu\r\n                            id=\"theme-picker-menu\"\r\n                            anchorEl={this.state.anchorEl}\r\n                            keepMounted\r\n                            open={Boolean(this.state.anchorEl)}\r\n                            onClose={this.handleThemePickerMenuClose}\r\n                        >\r\n                            {AppThemes.map((item, index) => (\r\n                                <MenuItem\r\n                                    key={'theme-picker-menu-item-' + index}\r\n                                    onClick={() => this.handleThemePickerMenuItemClick(item)}\r\n                                >{item.displayName}</MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </div>\r\n                    <div className={styles.footer_links}>\r\n                        <RouterLink to=\"/about\">Über das Spiel</RouterLink>\r\n                        <div className={styles.separator} aria-hidden=\"true\">|</div>\r\n                        <RouterLink to=\"/accessibility\">Barrierefreiheitserklärung</RouterLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleThemePickerClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    private handleThemePickerMenuClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    private handleThemePickerMenuItemClick = (selectedTheme: AppTheme) => {\r\n        this.setState({ anchorEl: null });\r\n        this.props.onSetAppTheme(selectedTheme);\r\n        setAppThemeIdInLocalStorage(selectedTheme.id);\r\n    };\r\n\r\n    private rejoinRunningGame = () => {\r\n        this.props.onPrepareRejoiningGame();\r\n        this.props.history.push('/play');\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): DashboardPropsFromStore => {\r\n    return {\r\n        activeTheme: state.activeTheme,\r\n        gameId: state.gameId\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): DashboardDispatchProps => {\r\n    return {\r\n        onPrepareRejoiningGame: () => dispatch(prepareRejoiningGame()),\r\n        onSetAppTheme: (payload: AppTheme) => dispatch(setAppTheme(payload)),\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config): void {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config): void {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister(): void {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import './App.css';\r\n\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport React, { Component, CSSProperties, Dispatch, lazy, Suspense } from 'react';\r\nimport { LiveAnnouncer } from 'react-aria-live';\r\nimport { connect } from 'react-redux';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport Header from './components/Header/Header';\r\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen';\r\nimport NewVersionSnackbar from './components/NewVersionSnackbar/NewVersionSnackbar';\r\nimport {\r\n    MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS,\r\n    SERVICE_WORKER_SKIP_WAITING,\r\n} from './constants/app.constant';\r\nimport { AppTheme, AppThemes } from './constants/themes.constant';\r\nimport Dashboard from './containers/Dashboard/Dashboard';\r\nimport { StoredRunningGameInfo } from './models/game.interface';\r\nimport { StoredPlayerInfo } from './models/player.interface';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppAction, setAppTheme, setStoredPlayerInfo, setStoredRunningGameInfo } from './store/app.actions';\r\nimport { AppState } from './store/app.reducer';\r\nimport { convertDateToUnixTimestamp } from './utils/general.utils';\r\nimport {\r\n    getAppThemeIdFromLocalStorage,\r\n    getPlayerInfoFromLocalStorage,\r\n    getRunningGameInfoFromLocalStorage,\r\n    removeAllDataOfRunningGameFromLocalStorage,\r\n    setPlayerInfoInLocalStorage,\r\n} from './utils/local-storage.utils';\r\n\r\n// Preload all routes available from the dashboard in the background.\r\nexport const a11yStatementPromise = import('./containers/AccessibilityStatement/AccessibilityStatement');\r\nexport const aboutTheGamePromise = import('./containers/AboutTheGame/AboutTheGame');\r\nexport const gameManualPromise = import('./containers/GameManual/GameManual');\r\nexport const joinGamePromise = import('./containers/JoinGame/JoinGame');\r\nexport const newGamePromise = import('./containers/NewGame/NewGame');\r\nexport const playGamePromise = import('./containers/PlayGame/PlayGame');\r\n\r\n// Use lazy loading of routes to speed up time to FCP (first contentful paint)\r\nconst AboutTheGame = lazy(() => aboutTheGamePromise);\r\nconst AccessibilityStatement = lazy(() => a11yStatementPromise);\r\nconst GameManual = lazy(() => gameManualPromise);\r\nconst GameResults = lazy(() => import('./containers/GameResults/GameResults'));\r\nconst JoinGame = lazy(() => joinGamePromise);\r\nconst NewGame = lazy(() => newGamePromise);\r\nconst PlayGame = lazy(() => playGamePromise);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst backspaceDisabler = require('backspace-disabler');\r\n\r\ninterface AppPropsFromStore {\r\n    activeTheme: AppTheme;\r\n}\r\ninterface AppDispatchProps {\r\n    onSetAppTheme: (payload: AppTheme) => void;\r\n    onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => void;\r\n    onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => void;\r\n}\r\ninterface AppProps extends AppPropsFromStore, AppDispatchProps { }\r\n\r\ninterface AppComponentState {\r\n    waitingWorker: ServiceWorker | null,\r\n    newVersionAvailable: boolean\r\n}\r\n\r\nclass App extends Component<AppProps, AppComponentState> {\r\n    public state: AppComponentState = {\r\n        waitingWorker: null,\r\n        newVersionAvailable: false\r\n    };\r\n\r\n    public render() {\r\n        const mainContent = (\r\n            <main\r\n                className={'app-main ' + this.props.activeTheme.className}\r\n                style={this.props.activeTheme.style as CSSProperties}\r\n            >\r\n                <Suspense fallback={<LoadingScreen />}>\r\n                    <Switch>\r\n                        <Route path=\"/about\" exact component={AboutTheGame} />\r\n                        <Route path=\"/accessibility\" exact component={AccessibilityStatement} />\r\n                        <Route path=\"/joingame\" exact component={JoinGame} />\r\n                        <Route path=\"/manual\" exact component={GameManual} />\r\n                        <Route path=\"/newgame\" exact component={NewGame} />\r\n                        <Route path=\"/play\" exact component={PlayGame} />\r\n                        <Route path=\"/results\" exact component={GameResults} />\r\n                        <Route path=\"/\" component={Dashboard} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </main>\r\n        );\r\n        const newVersionSnackbar = (\r\n            <NewVersionSnackbar updateServiceWorker={this.updateServiceWorker}></NewVersionSnackbar>\r\n        );\r\n        return (\r\n            <ThemeProvider theme={this.props.activeTheme.muiTheme}>\r\n                <SnackbarProvider maxSnack={3}>\r\n                    <LiveAnnouncer>\r\n                        <div className=\"app-container\">\r\n                            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                                <Header theme={this.props.activeTheme} />\r\n                                {mainContent}\r\n                            </HashRouter>\r\n                        </div>\r\n                    </LiveAnnouncer>\r\n                    {this.state.newVersionAvailable ? newVersionSnackbar : null}\r\n                </SnackbarProvider>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        serviceWorker.register({ onUpdate: this.onServiceWorkerUpdate });\r\n        // Prevent browser back on backspace (e.g. in Firefox).\r\n        backspaceDisabler.disable();\r\n        this.restoreAppTheme();\r\n        const nowTimestamp = convertDateToUnixTimestamp(new Date());\r\n        this.restorePlayerInfo(nowTimestamp);\r\n        this.restoreRunningGameInfo(nowTimestamp);\r\n    }\r\n\r\n    private restoreAppTheme = (): void => {\r\n        const appThemeId = getAppThemeIdFromLocalStorage();\r\n        if (appThemeId) {\r\n            const appTheme = AppThemes.find(theme => theme.id === appThemeId);\r\n            if (appTheme) {\r\n                this.props.onSetAppTheme(appTheme);\r\n            }\r\n        }\r\n    }\r\n\r\n    private restorePlayerInfo = (nowTimestamp: number): void => {\r\n        let storedPlayerInfo = getPlayerInfoFromLocalStorage();\r\n        // If no stored player info was found or player's id is past validity, create a new uuid and store in local storage.\r\n        if (!storedPlayerInfo || nowTimestamp - storedPlayerInfo.idCreationTimestamp > MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n            storedPlayerInfo = { id: uuidv4(), idCreationTimestamp: nowTimestamp, name: storedPlayerInfo ? storedPlayerInfo.name : '' };\r\n            setPlayerInfoInLocalStorage(storedPlayerInfo);\r\n        }\r\n        this.props.onSetStoredPlayerInfo(storedPlayerInfo);\r\n    }\r\n\r\n    private restoreRunningGameInfo = (nowTimestamp: number): void => {\r\n        const runningGameInfo = getRunningGameInfoFromLocalStorage();\r\n        if (runningGameInfo) {\r\n            // A running game is only valid for the time specified in the max validity constant.\r\n            if (nowTimestamp - runningGameInfo.idCreationTimestamp <= MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS) {\r\n                this.props.onSetStoredRunningGameInfo(runningGameInfo);\r\n            } else {\r\n                removeAllDataOfRunningGameFromLocalStorage();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onServiceWorkerUpdate = (registration: ServiceWorkerRegistration) => {\r\n        // Only alert user to new version, if they're not in the middle of playing a game.\r\n        if (!window.location.href.includes('/play')) {\r\n            this.setState({\r\n                waitingWorker: registration && registration.waiting,\r\n                newVersionAvailable: true\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateServiceWorker = (): void => {\r\n        const { waitingWorker } = this.state;\r\n        waitingWorker && waitingWorker.postMessage({ type: SERVICE_WORKER_SKIP_WAITING });\r\n        this.setState({ newVersionAvailable: false });\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppPropsFromStore => {\r\n    return {\r\n        activeTheme: state.activeTheme\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>): AppDispatchProps => {\r\n    return {\r\n        onSetAppTheme: (payload: AppTheme) => dispatch(setAppTheme(payload)),\r\n        onSetStoredPlayerInfo: (payload: StoredPlayerInfo) => dispatch(setStoredPlayerInfo(payload)),\r\n        onSetStoredRunningGameInfo: (payload: StoredRunningGameInfo) => dispatch(setStoredRunningGameInfo(payload))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { AppTheme, AppThemes } from '../constants/themes.constant';\r\nimport { GameConfig, GameRound } from '../models/game.interface';\r\nimport { PlayerInfo } from '../models/player.interface';\r\nimport { StoredRunningGameInfo } from './../models/game.interface';\r\nimport { StoredPlayerInfo } from './../models/player.interface';\r\nimport {\r\n    AppAction,\r\n    PREPARE_REJOINING_GAME,\r\n    RESET_APP_STATE,\r\n    ResetAppStateAction,\r\n    ResetAppStatePayload,\r\n    SET_APP_THEME,\r\n    SET_DATA_FOR_NEW_GAME,\r\n    SET_DATA_OF_FINISHED_GAME,\r\n    SET_STORED_PLAYER_INFO,\r\n    SET_STORED_RUNNING_GAME_INFO,\r\n    SetAppThemeAction,\r\n    SetDataForNewGameAction,\r\n    SetDataOfFinishedGameAction,\r\n    SetStoredPlayerInfoAction,\r\n    SetStoredRunningGameInfoAction,\r\n} from './app.actions';\r\n\r\nexport interface AppState {\r\n    activeTheme: AppTheme;\r\n    allPlayers: Map<string, PlayerInfo> | null;\r\n    gameId: string | null;\r\n    gameConfig: GameConfig | null;\r\n    gameRounds: GameRound[] | null;\r\n    isRejoiningGame: boolean;\r\n    joinGameErrorMessage: string | null;\r\n    playerIdCreationTimestamp: number;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n    activeTheme: AppThemes[0],\r\n    allPlayers: null,\r\n    gameId: null,\r\n    gameConfig: null,\r\n    gameRounds: null,\r\n    isRejoiningGame: false,\r\n    joinGameErrorMessage: null,\r\n    playerIdCreationTimestamp: 0,\r\n    playerInfo: null\r\n};\r\n\r\nexport const appReducer = (state: AppState = initialState, action: AppAction): AppState => {\r\n    let storedPlayerInfo: StoredPlayerInfo;\r\n    let storedRunningGameInfo: StoredRunningGameInfo;\r\n    let resetAppStatePayload: ResetAppStatePayload | undefined;\r\n    switch (action.type) {\r\n        case SET_APP_THEME:\r\n            return { ...state, activeTheme: (action as SetAppThemeAction).payload };\r\n        case SET_STORED_PLAYER_INFO:\r\n            storedPlayerInfo = (action as SetStoredPlayerInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: false,\r\n                playerIdCreationTimestamp: storedPlayerInfo.idCreationTimestamp,\r\n                playerInfo: {\r\n                    id: storedPlayerInfo.id,\r\n                    isAdmin: false,\r\n                    name: storedPlayerInfo.name\r\n                }\r\n            };\r\n        case SET_STORED_RUNNING_GAME_INFO:\r\n            storedRunningGameInfo = (action as SetStoredRunningGameInfoAction).payload;\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: true,\r\n                gameId: storedRunningGameInfo.gameId,\r\n                playerInfo: {\r\n                    ...state.playerInfo as PlayerInfo,\r\n                    isAdmin: storedRunningGameInfo.isPlayerAdmin\r\n                }\r\n            };\r\n        case SET_DATA_FOR_NEW_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataForNewGameAction).payload,\r\n                joinGameErrorMessage: null\r\n            };\r\n        case SET_DATA_OF_FINISHED_GAME:\r\n            return {\r\n                ...state,\r\n                ...(action as SetDataOfFinishedGameAction).payload,\r\n                // Set gameId to null to prevent player from manually opening PlayGame route.\r\n                gameId: null\r\n            };\r\n        case RESET_APP_STATE:\r\n            resetAppStatePayload = (action as ResetAppStateAction).payload;\r\n            return {\r\n                ...state,\r\n                allPlayers: null,\r\n                gameId: null,\r\n                gameConfig: null,\r\n                gameRounds: null,\r\n                joinGameErrorMessage: resetAppStatePayload ? resetAppStatePayload.joinGameErrorMessage : null\r\n            };\r\n        case PREPARE_REJOINING_GAME:\r\n            return {\r\n                ...state,\r\n                isRejoiningGame: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import './index.css';\r\n\r\nimport { StylesProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './App';\r\nimport { appReducer } from './store/app.reducer';\r\n\r\nexport const appStore = createStore(appReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={appStore}>\r\n        <StylesProvider injectFirst>\r\n            <App />\r\n        </StylesProvider>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","import { Action } from 'redux';\r\nimport { AppTheme } from '../constants/themes.constant';\r\nimport { GameConfig, GameRound, StoredRunningGameInfo } from '../models/game.interface';\r\nimport { PlayerInfo, StoredPlayerInfo } from './../models/player.interface';\r\n\r\nexport const SET_APP_THEME = 'SET_APP_THEME';\r\nexport const SET_STORED_PLAYER_INFO = 'SET_STORED_PLAYER_INFO';\r\nexport const SET_STORED_RUNNING_GAME_INFO = 'SET_STORED_RUNNING_GAME_INFO';\r\nexport const SET_DATA_FOR_NEW_GAME = 'SET_DATA_FOR_NEW_GAME';\r\nexport const SET_DATA_OF_FINISHED_GAME = 'SET_DATA_OF_FINISHED_GAME';\r\nexport const RESET_APP_STATE = 'RESET_APP_STATE';\r\nexport const PREPARE_REJOINING_GAME = 'PREPARE_REJOINING_GAME';\r\n\r\nexport interface SetAppThemeAction extends Action {\r\n    payload: AppTheme;\r\n}\r\n\r\nexport interface SetStoredPlayerInfoAction extends Action {\r\n    payload: StoredPlayerInfo;\r\n}\r\n\r\nexport interface SetStoredRunningGameInfoAction extends Action {\r\n    payload: StoredRunningGameInfo;\r\n}\r\n\r\nexport interface SetDataForNewGamePayload {\r\n    gameId: string;\r\n    gameConfig: GameConfig | null;\r\n    isRejoiningGame: boolean;\r\n    playerInfo: PlayerInfo | null;\r\n}\r\nexport interface SetDataForNewGameAction extends Action {\r\n    payload: SetDataForNewGamePayload\r\n}\r\n\r\nexport interface SetDataOfFinishedGamePayload {\r\n    allPlayers: Map<string, PlayerInfo>;\r\n    gameConfig: GameConfig;\r\n    gameRounds: GameRound[];\r\n}\r\nexport interface SetDataOfFinishedGameAction extends Action {\r\n    payload: SetDataOfFinishedGamePayload\r\n}\r\n\r\nexport interface ResetAppStatePayload {\r\n    joinGameErrorMessage: string | null;\r\n}\r\nexport interface ResetAppStateAction extends Action {\r\n    payload?: ResetAppStatePayload\r\n}\r\n\r\nexport type AppAction = SetAppThemeAction | SetStoredPlayerInfoAction | SetStoredRunningGameInfoAction\r\n    | SetDataForNewGameAction | SetDataOfFinishedGameAction | ResetAppStateAction | Action;\r\n\r\n/*\r\n * Action Creators\r\n */\r\nexport const setAppTheme = (payload: AppTheme): SetAppThemeAction => {\r\n    return { type: SET_APP_THEME, payload };\r\n};\r\nexport const setStoredPlayerInfo = (payload: StoredPlayerInfo): SetStoredPlayerInfoAction => {\r\n    return { type: SET_STORED_PLAYER_INFO, payload };\r\n};\r\nexport const setStoredRunningGameInfo = (payload: StoredRunningGameInfo): SetStoredRunningGameInfoAction => {\r\n    return { type: SET_STORED_RUNNING_GAME_INFO, payload };\r\n};\r\nexport const setDataForNewGame = (payload: SetDataForNewGamePayload): SetDataForNewGameAction => {\r\n    return { type: SET_DATA_FOR_NEW_GAME, payload };\r\n};\r\nexport const setDataOfFinishedGame = (payload: SetDataOfFinishedGamePayload): SetDataOfFinishedGameAction => {\r\n    return { type: SET_DATA_OF_FINISHED_GAME, payload };\r\n};\r\nexport const resetAppState = (payload?: ResetAppStatePayload): ResetAppStateAction => {\r\n    return { type: RESET_APP_STATE, payload };\r\n};\r\n /**\r\n * Sets isRejoiningGame to true. Necessary to cover certain edge cases.\r\n */\r\nexport const prepareRejoiningGame = (): Action => {\r\n    return { type: PREPARE_REJOINING_GAME };\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link_container\":\"Dashboard_link_container__3OzIj\",\"rejoin_game_button\":\"Dashboard_rejoin_game_button__T8kU8\",\"image_wrapper\":\"Dashboard_image_wrapper__2diTg\",\"theme_picker_button\":\"Dashboard_theme_picker_button__LkZGQ\",\"theme_picker_button_icon\":\"Dashboard_theme_picker_button_icon__1dDsC\",\"slf_image\":\"Dashboard_slf_image__xWV0X\",\"footer_links\":\"Dashboard_footer_links__2bwQ5\",\"separator\":\"Dashboard_separator__2i74U\"};","import { MAX_NUMBER_OF_ROUNDS } from '../constants/game.constant';\r\nimport {\r\n    CreativeStarsAwardedByPlayer,\r\n    GameConfig,\r\n    GameRound,\r\n    PlayerInput,\r\n    StoredRunningGameInfo,\r\n} from '../models/game.interface';\r\nimport { StoredPlayerInfo } from '../models/player.interface';\r\nimport { APP_THEME_ID } from './../constants/themes.constant';\r\nimport { convertCollectionToMap, convertMapToCollection } from './general.utils';\r\n\r\nconst APP_THEME_LS_KEY = 'SLF-APP-THEME';\r\nconst PLAYER_INFO_LS_KEY = 'SLF-PLAYER-INFO';\r\nconst RUNNING_GAME_CREATIVE_STARS_LS_KEY = 'SLF-RUNNING_GAME_CREATIVE_STARS';\r\nconst RUNNING_GAME_INFO_LS_KEY = 'SLF-RUNNING-GAME-INFO';\r\nconst RUNNING_GAME_CONFIG_LS_KEY = 'SLF-RUNNING-GAME-CONFIG';\r\n/** Is used to store a completed round in local storage; e.g. 'SLF-RUNNING-GAME-ROUND-1' */\r\nconst RUNNING_GAME_ROUND_LS_KEY_PREFIX = 'SLF-RUNNING-GAME-ROUND-';\r\n\r\nexport const getAppThemeIdFromLocalStorage = (): string | null =>  localStorage.getItem(APP_THEME_LS_KEY);\r\nexport const setAppThemeIdInLocalStorage = (appTheme: APP_THEME_ID): void => localStorage.setItem(APP_THEME_LS_KEY, appTheme);\r\n\r\nexport const getPlayerInfoFromLocalStorage = (): StoredPlayerInfo | null => {\r\n    const storedData = localStorage.getItem(PLAYER_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setPlayerInfoInLocalStorage = (data: StoredPlayerInfo): void => localStorage.setItem(PLAYER_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameInfoFromLocalStorage = (): StoredRunningGameInfo | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_INFO_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameInfoInLocalStorage = (data: StoredRunningGameInfo): void => localStorage.setItem(RUNNING_GAME_INFO_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameConfigFromLocalStorage = (): GameConfig | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    return storedData ? JSON.parse(storedData) : null;\r\n};\r\nexport const setRunningGameConfigInLocalStorage = (data: GameConfig): void => localStorage.setItem(RUNNING_GAME_CONFIG_LS_KEY, JSON.stringify(data));\r\n\r\nexport const getRunningGameCreativeStarsFromLocalStorage = (): CreativeStarsAwardedByPlayer => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_CREATIVE_STARS_LS_KEY);\r\n    return storedData ? convertCollectionToMap<number[]>(JSON.parse(storedData)) : new Map<string, number[]>();\r\n};\r\nexport const setRunningGameCreativeStarsInLocalStorage = (data: CreativeStarsAwardedByPlayer): void => {\r\n    localStorage.setItem(\r\n        RUNNING_GAME_CREATIVE_STARS_LS_KEY,\r\n        JSON.stringify(convertMapToCollection<number[]>(data))\r\n    );\r\n};\r\nexport const removeRunningGameCreativeStarsFromLocalStorage = (): void => localStorage.removeItem(RUNNING_GAME_CREATIVE_STARS_LS_KEY);\r\n\r\nexport const getRunningGameRoundFromLocalStorage = (round: number): GameRound | null => {\r\n    const storedData = localStorage.getItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + round);\r\n    return storedData ? convertCollectionToMap<PlayerInput[]>(JSON.parse(storedData)) : null;\r\n};\r\nexport const setRunningGameRoundInLocalStorage = (round: number, data: GameRound): void => {\r\n    localStorage.setItem(\r\n        RUNNING_GAME_ROUND_LS_KEY_PREFIX + round,\r\n        JSON.stringify(convertMapToCollection<PlayerInput[]>(data))\r\n    );\r\n};\r\n\r\nexport const removeAllDataOfRunningGameFromLocalStorage = (): void => {\r\n    localStorage.removeItem(RUNNING_GAME_INFO_LS_KEY);\r\n    localStorage.removeItem(RUNNING_GAME_CONFIG_LS_KEY);\r\n    localStorage.removeItem(RUNNING_GAME_CREATIVE_STARS_LS_KEY);\r\n    for (let i = 1; i <= MAX_NUMBER_OF_ROUNDS; i++) {\r\n        localStorage.removeItem(RUNNING_GAME_ROUND_LS_KEY_PREFIX + i);\r\n    }\r\n};\r\n","import { Collection } from '../models/collection.interface';\r\n\r\nexport const copyToClipboard = (text: string): void => {\r\n    const element = document.createElement('textarea');\r\n    element.value = text;\r\n    element.setAttribute('readonly', '');\r\n    element.style.position = 'absolute';\r\n    element.style.left = '-9999px';\r\n    document.body.appendChild(element);\r\n    element.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(element);\r\n};\r\n\r\nexport const createAndFillArray = <T>(length: number, value: T): T[] => {\r\n    return new Array(length).fill(value);\r\n};\r\n\r\nexport const makePluralIfCountIsNotOne = (count: number, singular: string, plural: string): string => {\r\n    return count === 1 ? singular : plural;\r\n};\r\n\r\nexport const joinWithAnd = (items: string[], andWord: string): string => {\r\n    if (items.length <= 1) {\r\n        return items.length === 0 ? '' : items[0];\r\n    }\r\n    const lastItemIndex = items.length - 1;\r\n    const itemsWithoutLast = items.slice(0, lastItemIndex);\r\n    return `${itemsWithoutLast.join(', ')} ${andWord} ${items[lastItemIndex]}`;\r\n};\r\n\r\nexport const convertDateToUnixTimestamp = (dateToConvert: Date): number => dateToConvert.getTime() / 1000 | 0;\r\n\r\nexport const convertCollectionToMap = <T>(collectionToConvert: Collection<T>): Map<string, T> => {\r\n    const dataAsMap = new Map<string, T>();\r\n    Object.keys(collectionToConvert).forEach(key => dataAsMap.set(key, collectionToConvert[key]));\r\n    return dataAsMap;\r\n};\r\n\r\nexport const convertMapToCollection = <T>(mapToConvert: Map<string, T>): Collection<T> => {\r\n    const dataAsCollection: Collection<T> = {};\r\n    mapToConvert.forEach((data, key) => dataAsCollection[key] = data);\r\n    return dataAsCollection;\r\n};\r\n\r\n/** Converts text to lower case and removes all non-alphanumeric characters for comparison */\r\nexport const getCleanText = (text: string): string => text.toLowerCase().replace(/[^0-9a-z]/gi, '');\r\n","import blue from '@material-ui/core/colors/blue';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport green from '@material-ui/core/colors/green';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport red from '@material-ui/core/colors/red';\r\nimport teal from '@material-ui/core/colors/teal';\r\nimport { createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport CSS from 'csstype';\r\n\r\nexport enum APP_THEME_ID {\r\n    green = 'green',\r\n    blue = 'blue',\r\n    orange = 'orange',\r\n    pink = 'pink',\r\n    black = 'black'\r\n}\r\n\r\nexport interface AppTheme {\r\n    id: APP_THEME_ID;\r\n    /** The background color used by the LetterAnimation component */\r\n    animationBackgroundColor: string;\r\n    /** The name of the CSS class that is applied to the header and the main element */\r\n    className: string;\r\n    /** The text displayed in the header's color picker dropdown */\r\n    displayName: string;\r\n    /** URL of the \"Stadt-Land-Fluss\" image visible on the homepage */\r\n    homepageImageUrl: string;\r\n    muiTheme: Theme;\r\n    style: CSS.Properties;\r\n}\r\n\r\nexport const AppThemes: AppTheme[] = [\r\n    {\r\n        id: APP_THEME_ID.green,\r\n        animationBackgroundColor: 'rgb(31, 121, 52)',\r\n        className: 'green-theme',\r\n        displayName: 'Grün/Wald',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-green.jpg`,\r\n        muiTheme: createMuiTheme({\r\n            palette: { primary: { main: green[800] }, secondary: { main: red[700] } }\r\n        }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(60, 143, 80, 0.3), rgba(60, 143, 80, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/leaves-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.blue,\r\n        animationBackgroundColor: 'rgb(9, 100, 204)',\r\n        className: 'blue-theme',\r\n        displayName: 'Blau/Meer',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-blue.jpg`,\r\n        muiTheme: createMuiTheme({\r\n            palette: { primary: { main: blue[800] }, secondary: { main: deepOrange['A700'] } }\r\n        }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/sea-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.orange,\r\n        animationBackgroundColor: 'rgb(187, 138, 5)',\r\n        className: 'orange-theme',\r\n        displayName: 'Orange/Strand',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-orange.jpg`,\r\n        muiTheme: createMuiTheme({\r\n            palette: { primary: { main: deepOrange[900] }, secondary: { main: indigo[600] } }\r\n        }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(241, 179, 8, 0.3), rgba(240, 188, 47, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/beach-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.pink,\r\n        animationBackgroundColor: 'rgb(167, 34, 207)',\r\n        className: 'pink-theme',\r\n        displayName: 'Pink/Musik',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-pink.jpg`,\r\n        muiTheme: createMuiTheme(\r\n            { palette: { primary: { main: purple[600] }, secondary: { main: teal[800] } } }\r\n        ),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(133, 14, 103, 0.3), rgba(133, 14, 103, 0.3)),\r\n                url('${process.env.PUBLIC_URL}/assets/music-pattern.jpg')`\r\n        }\r\n    },\r\n    {\r\n        id: APP_THEME_ID.black,\r\n        animationBackgroundColor: 'rgb(0, 0, 0)',\r\n        className: 'black-theme',\r\n        displayName: 'Schwarz/Goth',\r\n        homepageImageUrl: `${process.env.PUBLIC_URL}/assets/city-country-river-bw.jpg`,\r\n        muiTheme: createMuiTheme({\r\n            palette: { primary: { main: grey[900] }, secondary: { main: blueGrey[700] } }\r\n        }),\r\n        style: {\r\n            background:\r\n                `linear-gradient(rgba(0, 51, 153, 0.1), rgba(0, 51, 153, 0.1)),\r\n                url('${process.env.PUBLIC_URL}/assets/halloween-pattern.jpg')`\r\n        }\r\n    },\r\n];\r\n","/** 7 days in seconds */\r\nexport const MAX_PLAYER_ID_VALIDITY_DURATION_IN_SECONDS = 7 * 24 * 60 * 60;\r\n/** 1 hour in seconds */\r\nexport const MAX_GAME_ID_VALIDITY_DURATION_IN_SECONDS = 60 * 60;\r\n\r\nexport const PLAYER_NAME_MAX_LENGTH = 20;\r\n\r\nexport const SERVICE_WORKER_SKIP_WAITING = 'SKIP_WAITING';\r\n","export const DEFAULT_NUMBER_OF_ROUNDS = 3;\r\nexport const MIN_NUMBER_OF_ROUNDS = 1;\r\nexport const MAX_NUMBER_OF_ROUNDS = 15;\r\nexport const MIN_NUMBER_OF_CATEGORIES = 3;\r\n/** Duration of countdown in seconds */\r\nexport const DEFAULT_DURATION_OF_COUNTDOWN = 60;\r\nexport const MIN_DURATION_OF_COUNTDOWN = 30;\r\n\r\nexport const STANDARD_ALPHABET = [\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\r\n];\r\nexport const STANDARD_EXCLUDED_LETTERS = ['Q', 'X', 'Y'];\r\n\r\nexport const STANDARD_CATEGORIES = ['Stadt', 'Land', 'Fluss/Gewässer'];\r\nexport const AVAILABLE_CATEGORIES = [\r\n    'Arbeitsunfall',\r\n    'Band/Musiker',\r\n    'Berg/Gebirge',\r\n    'Beruf',\r\n    'Berühmte Person',\r\n    'Buchtitel',\r\n    'Chemisches Element',\r\n    'Dinge die man jeden Tag macht',\r\n    'Etwas Eckiges',\r\n    'Etwas Rundes',\r\n    'Fiktiver Charakter',\r\n    'Film/Serie',\r\n    'Getränk',\r\n    'Grund für eine Verspätung',\r\n    'Haushaltsgerät',\r\n    'Hobby',\r\n    'In Zeiten des Corona-Lockdowns verboten',\r\n    'Könnte ein Trump-Tweet sein',\r\n    'Körperteil',\r\n    'Krankheit',\r\n    'Laster',\r\n    'Marke',\r\n    'Mordwaffe',\r\n    'Name rückwärts geschrieben',\r\n    'Ort, um eine Leiche zu verstecken',\r\n    'Pflanze',\r\n    'Pizzasorte',\r\n    'Porno-Künstlername',\r\n    'Religion',\r\n    'Scheidungsgrund',\r\n    'Schimpfwort',\r\n    'See/Meer',\r\n    'Sehenswürdigkeit',\r\n    'Sex (Stellung, Synonym)',\r\n    'Speise',\r\n    'Tier',\r\n    'Title of your Sex Tape',\r\n    'Unnötige Superkraft',\r\n    'Videospiel',\r\n    'Was bei einer Zoom-Konferenz schiefgehen kann',\r\n    'Werkzeug',\r\n    'Wort in einer Fremdsprache'\r\n];\r\n\r\nexport enum GamePhase {\r\n    evaluateRound = 'evaluateRound',\r\n    fillOutTextfields = 'fillOutTextfields',\r\n    waitingToStart = 'waitingToStart',\r\n}\r\n\r\nexport const MIN_NUMBER_OF_PLAYERS = 2;\r\n\r\n/** Number of letters displayed one after another during the animation that reveals the letter for the next round */\r\nexport const LETTER_ANIMATION_LETTER_COUNT = 5;\r\n/** Time until the next letter in the \"letter reveal\" animation is drawn; interval in milliseconds */\r\nexport const LETTER_ANIMATION_REDRAW_SPEED = 800;\r\n\r\nexport const SAME_WORD_POINTS = 5;\r\nexport const STANDARD_POINTS = 10;\r\nexport const ONLY_ANSWER_POINTS = 20;\r\n/**\r\n * Extra points for each \"creative answer\" star received from another player.\r\n * Are only awarded if the corresponding scoring option was selected.\r\n */\r\nexport const EXTRA_POINTS = 2;\r\n\r\nexport const GAME_OPTION_LABEL = {\r\n    checkForDuplicates: `Wenn zwei oder mehr Personen eine identische Antwort in einer Kategorie eintragen,\r\n        so zählt diese nur ${SAME_WORD_POINTS} statt ${STANDARD_POINTS} Punkte.`,\r\n    creativeAnswersExtraPoints: `Von anderen Spielerinnen oder Spielern als besonders kreativ ausgezeichnete\r\n        Antworten bringen ${EXTRA_POINTS} Extrapunkte pro Kreativ-Stern.`,\r\n    onlyPlayerWithValidAnswer: `Wenn eine Person als einzige eine zulässige Antwort in einer Kategorie\r\n        einträgt, so zählt diese Antwort ${ONLY_ANSWER_POINTS} statt ${STANDARD_POINTS} Punkte.`\r\n};\r\n","import { Divider } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ninterface SectionHeaderProps {\r\n    text: string;\r\n}\r\n\r\nexport const SectionHeader: React.FunctionComponent<SectionHeaderProps> = props => (\r\n    <React.Fragment>\r\n        <h2 className=\"section-header\">{props.text}</h2>\r\n        <Divider />\r\n    </React.Fragment>\r\n);\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst loadingSpinnerSize = 60;\r\n\r\nconst useStyles = makeStyles({\r\n    loadingScreen: {\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n    },\r\n    loadingSpinner: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: loadingSpinnerSize + 'px'\r\n    },\r\n    waitingForPlayers: {\r\n        position: 'absolute',\r\n        bottom: '1rem',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        maxWidth: '36rem',\r\n        margin: '0 !important'\r\n    }\r\n});\r\n\r\ninterface LoadingScreenProps {\r\n    waitingForPlayers?: string[];\r\n}\r\n\r\nconst LoadingScreen: React.FunctionComponent<LoadingScreenProps> = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.loadingScreen}>\r\n            <div className={classes.loadingSpinner}>\r\n                <CircularProgress color=\"secondary\" size={loadingSpinnerSize} />\r\n            </div>\r\n            {props.waitingForPlayers ? (\r\n                <div className={'material-card-style ' + classes.waitingForPlayers} role=\"alert\">\r\n                    Warte auf: <span className=\"bold-text\">{props.waitingForPlayers.join(', ')}</span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingScreen;\r\n"],"sourceRoot":""}